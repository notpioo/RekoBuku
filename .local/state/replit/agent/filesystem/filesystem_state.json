{"file_contents":{"app.py":{"content":"from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, abort\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom flask_wtf.csrf import CSRFProtect\nfrom werkzeug.utils import secure_filename\nfrom functools import wraps\nimport os\nfrom urllib.parse import urlparse, urljoin\n\napp = Flask(__name__)\n# Require SESSION_SECRET to be set for security\nif not os.environ.get('SESSION_SECRET'):\n    raise RuntimeError('SESSION_SECRET environment variable must be set')\napp.secret_key = os.environ.get('SESSION_SECRET')\n\n# CSRF Protection\ncsrf = CSRFProtect(app)\n\n# Flask-Login setup\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # type: ignore\nlogin_manager.login_message = 'Silakan masuk untuk mengakses halaman ini.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from app.models.user import User\n    return User.get(user_id)\n\n# Admin decorator\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated or not current_user.is_admin():\n            abort(403)\n        return f(*args, **kwargs)\n    return decorated_function\n\n# Maintenance mode decorator\ndef maintenance_check(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        # Skip maintenance check for admin users and specific routes\n        if (current_user.is_authenticated and current_user.is_admin()) or \\\n           request.endpoint in ['login', 'maintenance_page', 'static']:\n            return f(*args, **kwargs)\n        \n        # Check if maintenance mode is enabled\n        if Settings.is_maintenance_mode():\n            return render_template('maintenance.html'), 503\n        \n        return f(*args, **kwargs)\n    return decorated_function\n\n# Apply maintenance check to all routes\n@app.before_request\ndef check_maintenance():\n    # Skip maintenance check for admin users, login, and static files\n    if (current_user.is_authenticated and current_user.is_admin()) or \\\n       request.endpoint in ['login', 'maintenance_page', 'static'] or \\\n       request.endpoint is None:\n        return None\n    \n    # Check if maintenance mode is enabled\n    if Settings.is_maintenance_mode():\n        return render_template('maintenance.html'), 503\n\n# Import models and forms\nfrom app.models.user import User\nfrom app.models.book import Book\nfrom app.models.settings import Settings\nfrom app.forms.auth import LoginForm, RegisterForm\nfrom app.forms.book import BookForm, EditBookForm\nfrom app.forms.user import UserForm, EditUserForm\n\n# Routes\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('home'))\n\n    form = LoginForm()\n    if form.validate_on_submit():\n        # Check if input is email or name\n        user = User.get_by_email(form.email.data)\n        if not user:\n            # Try to find by name\n            users = User.get_all()\n            for u in users:\n                if u.nama is not None and form.email.data and u.nama.lower() == form.email.data.lower():\n                    user = u\n                    break\n\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('Berhasil masuk!', 'success')\n            next_page = request.args.get('next')\n            if next_page and is_safe_url(next_page):\n                return redirect(next_page)\n            elif user.is_admin():\n                return redirect(url_for('admin_dashboard'))\n            else:\n                return redirect(url_for('home'))\n        else:\n            flash('Email/nama atau password salah', 'danger')\n\n    return render_template('auth/login.html', form=form)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('home'))\n\n    form = RegisterForm()\n    if form.validate_on_submit():\n        user = User.create(\n            nama=form.nama.data,\n            email=form.email.data,\n            password=form.password.data\n        )\n        flash('Pendaftaran berhasil! Silakan masuk.', 'success')\n        return redirect(url_for('login'))\n\n    return render_template('auth/register.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Anda telah keluar', 'info')\n    return redirect(url_for('home'))\n\n# Admin Routes\n@app.route('/admin')\n@login_required\n@admin_required\ndef admin_dashboard():\n    total_users = len(User.get_all())\n    total_books = len(Book.get_all())\n    admin_users = [u for u in User.get_all() if u.is_admin()]\n    regular_users = [u for u in User.get_all() if u.is_pengguna()]\n\n    return render_template('admin/dashboard.html', \n                         total_users=total_users,\n                         total_books=total_books,\n                         admin_users=len(admin_users),\n                         regular_users=len(regular_users))\n\n@app.route('/admin/books')\n@login_required\n@admin_required\ndef admin_books():\n    books = Book.get_all()\n    return render_template('admin/books.html', books=books)\n\n@app.route('/admin/users')\n@login_required\n@admin_required\ndef admin_users():\n    users = User.get_all()\n    return render_template('admin/users.html', users=users)\n\n@app.route('/admin/nlp')\n@login_required\n@admin_required\ndef admin_nlp():\n    return render_template('admin/nlp.html')\n\n@app.route('/admin/settings', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef admin_settings():\n    if request.method == 'POST':\n        # Handle recommendation settings update (check this first)\n        if 'quick_count' in request.form and 'personal_count' in request.form:\n            try:\n                quick_count = int(request.form.get('quick_count', 7))\n                personal_count = int(request.form.get('personal_count', 7))\n                Settings.update_recommendations_count(quick_count, personal_count)\n                flash('Pengaturan rekomendasi berhasil diupdate!', 'success')\n            except ValueError:\n                flash('Nilai pengaturan rekomendasi tidak valid!', 'danger')\n            return redirect(url_for('admin_settings'))\n        \n        # Handle maintenance mode toggle\n        else:\n            maintenance_mode = 'maintenance_mode' in request.form\n            Settings.set_maintenance_mode(maintenance_mode)\n            \n            action = 'diaktifkan' if maintenance_mode else 'dinonaktifkan'\n            flash(f'Mode maintenance berhasil {action}!', 'success')\n            return redirect(url_for('admin_settings'))\n    \n    maintenance_status = Settings.is_maintenance_mode()\n    quick_count = Settings.get_quick_recommendations_count()\n    personal_count = Settings.get_personal_recommendations_count()\n    \n    return render_template('admin/settings.html', \n                         maintenance_status=maintenance_status,\n                         quick_count=quick_count,\n                         personal_count=personal_count)\n\n# Book Management Routes\n@app.route('/admin/books/add', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef add_book():\n    form = BookForm()\n    if form.validate_on_submit():\n        foto_path = None\n        if form.foto.data:\n            # Create upload folder if it doesn't exist\n            upload_folder = 'static/uploads/books'\n            os.makedirs(upload_folder, exist_ok=True)\n            \n            # Save the file\n            filename = secure_filename(form.foto.data.filename)\n            foto_full_path = os.path.join(upload_folder, filename)\n            form.foto.data.save(foto_full_path)\n            # Store the web-accessible path (with /static/ prefix)\n            foto_path = f\"/static/uploads/books/{filename}\"\n\n        Book.create(\n            judul=form.judul.data,\n            penulis=form.penulis.data,\n            tag=form.tag.data,\n            foto=foto_path,\n            deskripsi_singkat=form.deskripsi_singkat.data\n        )\n        flash('Buku berhasil ditambahkan!', 'success')\n        return redirect(url_for('admin_books'))\n    return render_template('admin/book_form.html', form=form, title='Tambah Buku Baru')\n\n@app.route('/admin/books/edit/<book_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef edit_book(book_id):\n    book = Book.get(book_id)\n    if not book:\n        flash('Buku tidak ditemukan', 'error')\n        return redirect(url_for('admin_books'))\n\n    form = EditBookForm(obj=book) # Use EditBookForm here\n    if form.validate_on_submit():\n        foto_path = book.foto # Keep existing photo if not updated\n        if form.foto.data:\n            # Create upload folder if it doesn't exist\n            upload_folder = 'static/uploads/books'\n            os.makedirs(upload_folder, exist_ok=True)\n\n            # Save the new file\n            filename = secure_filename(form.foto.data.filename)\n            foto_full_path = os.path.join(upload_folder, filename)\n            form.foto.data.save(foto_full_path)\n            # Store the web-accessible path (with /static/ prefix)\n            foto_path = f\"/static/uploads/books/{filename}\"\n        \n        book.update(\n            judul=form.judul.data,\n            penulis=form.penulis.data,\n            tag=form.tag.data,\n            foto=foto_path,\n            deskripsi_singkat=form.deskripsi_singkat.data\n        )\n        flash('Buku berhasil diupdate!', 'success')\n        return redirect(url_for('admin_books'))\n\n    # Pre-populate form with current book data\n    if request.method == 'GET':\n        form.judul.data = book.judul\n        form.penulis.data = book.penulis\n        form.tag.data = book.tag\n        # form.foto.data = book.foto # No need to set foto.data for EditBookForm\n        form.deskripsi_singkat.data = book.deskripsi_singkat\n\n    return render_template('admin/book_form.html', form=form, title='Edit Buku', book=book)\n\n@app.route('/admin/books/delete/<book_id>', methods=['POST'])\n@login_required\n@admin_required\ndef delete_book(book_id):\n    book = Book.get(book_id)\n    if not book:\n        return jsonify({'error': 'Buku tidak ditemukan'}), 404\n\n    Book.delete(book_id)\n    flash('Buku berhasil dihapus!', 'success')\n    return jsonify({'success': True, 'message': 'Buku berhasil dihapus!'})\n\n# User Management Routes\n@app.route('/admin/users/add', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef add_user():\n    form = UserForm()\n    if form.validate_on_submit():\n        User.create(\n            nama=form.nama.data,\n            email=form.email.data,\n            password=form.password.data\n        )\n        # Update role if it's not the default\n        if form.role.data != 'pengguna':\n            user = User.get_by_email(form.email.data)\n            if user:\n                user.role = form.role.data\n                user.save()\n        \n        flash('Pengguna berhasil ditambahkan!', 'success')\n        return redirect(url_for('admin_users'))\n    return render_template('admin/user_form.html', form=form, title='Tambah Pengguna Baru')\n\n@app.route('/admin/users/edit/<user_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef edit_user(user_id):\n    user = User.get(user_id)\n    if not user:\n        flash('Pengguna tidak ditemukan', 'error')\n        return redirect(url_for('admin_users'))\n\n    form = EditUserForm(original_email=user.email)\n    if form.validate_on_submit():\n        password = form.password.data if form.password.data else None\n        user.update(\n            nama=form.nama.data,\n            email=form.email.data,\n            role=form.role.data,\n            password=password\n        )\n        flash('Pengguna berhasil diupdate!', 'success')\n        return redirect(url_for('admin_users'))\n\n    # Pre-populate form with current user data\n    if request.method == 'GET':\n        form.nama.data = user.nama\n        form.email.data = user.email\n        form.role.data = user.role\n\n    return render_template('admin/user_form.html', form=form, title='Edit Pengguna', user=user)\n\n@app.route('/admin/users/delete/<user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef delete_user(user_id):\n    user = User.get(user_id)\n    if not user:\n        return jsonify({'error': 'Pengguna tidak ditemukan'}), 404\n    \n    # Prevent deleting admin users\n    if user.is_admin():\n        return jsonify({'error': 'Tidak dapat menghapus pengguna admin'}), 403\n    \n    # Prevent self-deletion\n    if user.id == current_user.id:\n        return jsonify({'error': 'Tidak dapat menghapus akun sendiri'}), 403\n\n    User.delete(user_id)\n    flash('Pengguna berhasil dihapus!', 'success')\n    return jsonify({'success': True, 'message': 'Pengguna berhasil dihapus!'})\n\n@app.route('/')\ndef home():\n    # Get quick recommendations using settings\n    quick_count = Settings.get_quick_recommendations_count()\n    quick_recommendations = Book.get_random(quick_count)\n\n    # Get personalized recommendations using settings\n    personal_count = Settings.get_personal_recommendations_count()\n    if current_user.is_authenticated:\n        personal_recommendations = Book.get_recommendations_for_user(current_user)[:personal_count]\n    else:\n        personal_recommendations = Book.get_random(personal_count)\n\n    return render_template('home.html', \n                         quick_recommendations=quick_recommendations,\n                         personal_recommendations=personal_recommendations)\n\n@app.route('/jelajah')\n@login_required\ndef jelajah():\n    books = Book.get_all()\n    return render_template('jelajah.html', books=books)\n\n@app.route('/profil')\n@login_required\ndef profil():\n    # Get user's favorite books\n    favorite_books = []\n    for book_id in current_user.favorites:\n        book = Book.get(book_id)\n        if book:\n            favorite_books.append(book)\n\n    return render_template('profil.html', favorite_books=favorite_books)\n\n@app.route('/book/<book_id>')\ndef book_detail(book_id):\n    book = Book.get(book_id)\n    if not book:\n        flash('Buku tidak ditemukan', 'error')\n        return redirect(url_for('home'))\n\n    is_favorite = False\n    if current_user.is_authenticated:\n        is_favorite = current_user.is_favorite(book_id)\n\n    return render_template('book_detail.html', book=book, is_favorite=is_favorite)\n\n@app.route('/toggle_favorite/<book_id>', methods=['POST'])\n@login_required\ndef toggle_favorite(book_id):\n    book = Book.get(book_id)\n    if not book:\n        return jsonify({'error': 'Buku tidak ditemukan'}), 404\n\n    if current_user.is_favorite(book_id):\n        current_user.remove_favorite(book_id)\n        message = 'Buku dihapus dari favorit'\n        is_favorite = False\n    else:\n        current_user.add_favorite(book_id)\n        message = 'Buku ditambahkan ke favorit'\n        is_favorite = True\n\n    return jsonify({\n        'message': message,\n        'is_favorite': is_favorite\n    })\n\n@app.route('/maintenance')\ndef maintenance_page():\n    \"\"\"Dedicated maintenance page route\"\"\"\n    return render_template('maintenance.html'), 503\n\ndef is_safe_url(target):\n    \"\"\"Check if the target URL is safe for redirects (prevents open redirect attacks)\"\"\"\n    ref_url = urlparse(request.host_url)\n    test_url = urlparse(urljoin(request.host_url, target))\n    return test_url.scheme in ('http', 'https') and \\\n           ref_url.netloc == test_url.netloc\n\nif __name__ == '__main__':\n    # Use debug mode only in development\n    debug_mode = os.environ.get('FLASK_ENV') == 'development'\n    app.run(host='0.0.0.0', port=5000, debug=debug_mode)","size_bytes":15506},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-wtf>=1.2.2\",\n    \"psycopg2-binary>=2.9.10\",\n    \"gunicorn>=23.0.0\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":353},"replit.md":{"content":"# RekoBuku - Personal Book Recommendation System\n\n## Overview\n\nRekoBuku is a Flask-based web application that provides personalized book recommendations to users. The system allows users to browse a curated collection of Indonesian books, add favorites, and receive tailored recommendations based on their preferences. The application features user authentication, book discovery, and personal profile management with a clean, responsive interface built using Bootstrap.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templating with Flask for server-side rendering\n- **UI Framework**: Bootstrap 5 for responsive design and components\n- **Styling**: Custom CSS with CSS variables for consistent theming\n- **JavaScript**: Vanilla JavaScript for interactive features like favorite toggling\n- **Icons**: Font Awesome for consistent iconography\n\n### Backend Architecture\n- **Framework**: Flask with modular structure using blueprints pattern\n- **Authentication**: Flask-Login for session management and user authentication\n- **Security**: Flask-WTF with CSRF protection for form security\n- **Forms**: WTForms for form validation and rendering\n- **Password Security**: Werkzeug for password hashing and verification\n\n### Data Storage Solutions\n- **User Data**: JSON file-based storage (`data/users.json`) for user profiles and authentication\n- **Book Data**: JSON file-based storage (`data/books.json`) for book catalog and metadata\n- **File Structure**: Simple file-based persistence suitable for small to medium datasets\n- **Data Models**: Python classes with static methods for data access and manipulation\n\n### Authentication and Authorization\n- **Session Management**: Flask-Login with secure session handling\n- **Password Hashing**: Werkzeug's secure password hashing\n- **User Registration**: Email-based registration with validation\n- **Login Methods**: Supports both email and username login\n- **Access Control**: Login-required decorators for protected routes\n\n### Application Structure\n- **MVC Pattern**: Separation of models, views (templates), and controllers (routes)\n- **Modular Design**: Organized into packages for models, forms, and templates\n- **Static Assets**: Separate directories for CSS, JavaScript, and images\n- **Template Inheritance**: Base template system for consistent layout\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5**: CSS framework for responsive design and pre-built components\n- **Font Awesome 6**: Icon library for user interface elements\n- **CDN Delivery**: External CDN links for Bootstrap and Font Awesome resources\n\n### Python Packages\n- **Flask**: Core web framework for routing and request handling\n- **Flask-Login**: User session management and authentication\n- **Flask-WTF**: CSRF protection and form handling integration\n- **WTForms**: Form validation, rendering, and data processing\n- **Werkzeug**: Password hashing utilities and security functions\n\n### Development Dependencies\n- **Environment Variables**: Configuration through environment variables for security\n- **JSON Processing**: Built-in Python JSON library for data persistence\n- **UUID Generation**: Python UUID library for unique identifier generation\n- **OS Module**: File system operations for data file management\n\n### Static Resources\n- **Placeholder Images**: Via.placeholder.com for book cover placeholders\n- **Google Fonts**: Inter font family for typography (referenced in CSS)\n- **Local Assets**: Custom CSS and JavaScript files served from static directory\n\n## Project Status\n\n### Implementation Complete (September 2025)\n✅ **Fully Functional Web Application**: RekoBuku is now complete and running successfully on port 5000\n\n**Key Features Implemented:**\n- Three main navigation pages (Home, Jelajah, Profil) with proper access control\n- Custom authentication system with login/register forms\n- Book recommendation engine with quick and personalized recommendations\n- AJAX-powered favorite book system with CSRF protection\n- Modern responsive UI with Bootstrap 5 and Font Awesome 6 icons\n- JSON-based local database for users and books\n- Security features including password hashing and session management\n\n**Technical Highlights:**\n- Consolidated Flask application structure in single app.py for simplicity\n- Complete template system with base template inheritance\n- Custom CSS styling with responsive design\n- JavaScript functionality for interactive features\n- Proper error handling and user feedback systems","size_bytes":4564},"app/__init__.py":{"content":"# This file makes app a Python package","size_bytes":38},"app/forms/__init__.py":{"content":"# This file makes forms a Python package","size_bytes":40},"app/forms/auth.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Email, EqualTo, Length, ValidationError\nfrom app.models.user import User\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email atau Nama', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    submit = SubmitField('Masuk')\n\nclass RegisterForm(FlaskForm):\n    nama = StringField('Nama Lengkap', validators=[\n        DataRequired(message='Nama harus diisi'),\n        Length(min=2, max=50, message='Nama harus antara 2-50 karakter')\n    ])\n    email = StringField('Email', validators=[\n        DataRequired(message='Email harus diisi'),\n        Email(message='Format email tidak valid')\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message='Password harus diisi'),\n        Length(min=6, message='Password minimal 6 karakter')\n    ])\n    confirm_password = PasswordField('Konfirmasi Password', validators=[\n        DataRequired(message='Konfirmasi password harus diisi'),\n        EqualTo('password', message='Password tidak cocok')\n    ])\n    submit = SubmitField('Daftar')\n    \n    def validate_email(self, email):\n        user = User.get_by_email(email.data)\n        if user:\n            raise ValidationError('Email sudah terdaftar. Silakan gunakan email lain.')","size_bytes":1390},"app/forms/book.py":{"content":"\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, TextAreaField, SelectMultipleField, SubmitField\nfrom wtforms.validators import DataRequired, Length\n\nclass BookForm(FlaskForm):\n    judul = StringField('Judul Buku', validators=[\n        DataRequired(message='Judul buku harus diisi'),\n        Length(min=1, max=200, message='Judul buku maksimal 200 karakter')\n    ])\n    penulis = StringField('Penulis', validators=[\n        DataRequired(message='Penulis harus diisi'),\n        Length(min=1, max=100, message='Nama penulis maksimal 100 karakter')\n    ])\n    tag = SelectMultipleField('Tag', choices=[\n        ('Algoritma', 'Algoritma'),\n        ('Struktur Data', 'Struktur Data'),\n        ('Pemrograman', 'Pemrograman'),\n        ('Basis Data', 'Basis Data'),\n        ('Kecerdasan Buatan', 'Kecerdasan Buatan'),\n        ('Pembelajaran Mesin', 'Pembelajaran Mesin'),\n        ('Sistem Operasi', 'Sistem Operasi'),\n        ('Jaringan Komputer', 'Jaringan Komputer'),\n        ('Keamanan Informatika', 'Keamanan Informatika'),\n        ('Komputasi Awan', 'Komputasi Awan'),\n        ('Data Science', 'Data Science'),\n        ('Sistem Tertanam', 'Sistem Tertanam'),\n        ('Rekayasa Perangkat Lunak', 'Rekayasa Perangkat Lunak'),\n        ('Manajemen Proyek', 'Manajemen Proyek'),\n        ('Manajemen Sumber Daya Manusia', 'Manajemen Sumber Daya Manusia'),\n        ('Akuntansi', 'Akuntansi'),\n        ('Keuangan', 'Keuangan'),\n        ('Analisis Bisnis', 'Analisis Bisnis'),\n        ('Bisnis Digital', 'Bisnis Digital'),\n        ('Pemasaran', 'Pemasaran'),\n        ('Ekonomi Mikro/Makro', 'Ekonomi Mikro/Makro'),\n        ('Perilaku Organisasi', 'Perilaku Organisasi'),\n        ('Audit Internal', 'Audit Internal'),\n        ('Teknik Lingkungan', 'Teknik Lingkungan'),\n        ('Teknik Pertambangan', 'Teknik Pertambangan'),\n        ('Teknik Elektro', 'Teknik Elektro'),\n        ('Teknik Mesin', 'Teknik Mesin'),\n        ('Sistem Proses', 'Sistem Proses'),\n        ('Kontrol Otomatis', 'Kontrol Otomatis'),\n        ('Robotika', 'Robotika')\n    ], validators=[DataRequired(message='Pilih minimal satu tag')])\n    \n    foto = FileField('Foto Cover', validators=[\n        DataRequired(message='Foto cover harus diupload'),\n        FileAllowed(['jpg', 'jpeg', 'png', 'gif'], message='Format file harus JPG, JPEG, PNG, atau GIF')\n    ])\n    deskripsi_singkat = TextAreaField('Deskripsi Singkat', validators=[\n        DataRequired(message='Deskripsi singkat harus diisi'),\n        Length(min=10, max=800, message='Deskripsi harus antara 10-800 karakter')\n    ])\n    submit = SubmitField('Simpan Buku')\n\nclass EditBookForm(FlaskForm):\n    judul = StringField('Judul Buku', validators=[\n        DataRequired(message='Judul buku harus diisi'),\n        Length(min=1, max=200, message='Judul buku maksimal 200 karakter')\n    ])\n    penulis = StringField('Penulis', validators=[\n        DataRequired(message='Penulis harus diisi'),\n        Length(min=1, max=100, message='Nama penulis maksimal 100 karakter')\n    ])\n    tag = SelectMultipleField('Tag', choices=[\n        ('Algoritma', 'Algoritma'),\n        ('Struktur Data', 'Struktur Data'),\n        ('Pemrograman', 'Pemrograman'),\n        ('Basis Data', 'Basis Data'),\n        ('Kecerdasan Buatan', 'Kecerdasan Buatan'),\n        ('Pembelajaran Mesin', 'Pembelajaran Mesin'),\n        ('Sistem Operasi', 'Sistem Operasi'),\n        ('Jaringan Komputer', 'Jaringan Komputer'),\n        ('Keamanan Informatika', 'Keamanan Informatika'),\n        ('Komputasi Awan', 'Komputasi Awan'),\n        ('Data Science', 'Data Science'),\n        ('Sistem Tertanam', 'Sistem Tertanam'),\n        ('Rekayasa Perangkat Lunak', 'Rekayasa Perangkat Lunak'),\n        ('Manajemen Proyek', 'Manajemen Proyek'),\n        ('Manajemen Sumber Daya Manusia', 'Manajemen Sumber Daya Manusia'),\n        ('Akuntansi', 'Akuntansi'),\n        ('Keuangan', 'Keuangan'),\n        ('Analisis Bisnis', 'Analisis Bisnis'),\n        ('Bisnis Digital', 'Bisnis Digital'),\n        ('Pemasaran', 'Pemasaran'),\n        ('Ekonomi Mikro/Makro', 'Ekonomi Mikro/Makro'),\n        ('Perilaku Organisasi', 'Perilaku Organisasi'),\n        ('Audit Internal', 'Audit Internal'),\n        ('Teknik Lingkungan', 'Teknik Lingkungan'),\n        ('Teknik Pertambangan', 'Teknik Pertambangan'),\n        ('Teknik Elektro', 'Teknik Elektro'),\n        ('Teknik Mesin', 'Teknik Mesin'),\n        ('Sistem Proses', 'Sistem Proses'),\n        ('Kontrol Otomatis', 'Kontrol Otomatis'),\n        ('Robotika', 'Robotika')\n    ], validators=[DataRequired(message='Pilih minimal satu tag')])\n    \n    foto = FileField('Foto Cover (Opsional)', validators=[\n        FileAllowed(['jpg', 'jpeg', 'png', 'gif'], message='Format file harus JPG, JPEG, PNG, atau GIF')\n    ])\n    deskripsi_singkat = TextAreaField('Deskripsi Singkat', validators=[\n        DataRequired(message='Deskripsi singkat harus diisi'),\n        Length(min=10, max=800, message='Deskripsi harus antara 10-800 karakter')\n    ])\n    submit = SubmitField('Update Buku')\n","size_bytes":5044},"app/models/__init__.py":{"content":"# This file makes models a Python package","size_bytes":41},"app/models/book.py":{"content":"import json\nimport os\nimport random\n\nclass Book:\n    def __init__(self, id, judul, penulis, tag, foto, deskripsi_singkat):\n        self.id = id\n        self.judul = judul\n        self.penulis = penulis\n        self.tag = tag\n        self.foto = foto\n        self.deskripsi_singkat = deskripsi_singkat\n\n        # Backward compatibility properties\n        self.title = judul\n        self.author = penulis\n        self.genre = tag\n        self.cover_image = foto\n        self.description = deskripsi_singkat\n\n    @staticmethod\n    def get_books_file():\n        return 'data/books.json'\n\n    @classmethod\n    def get_all(cls):\n        if not os.path.exists(cls.get_books_file()):\n            return []\n        with open(cls.get_books_file(), 'r', encoding='utf-8') as f:\n            books_data = json.load(f)\n            books = []\n            for book_data in books_data:\n                # Handle both old and new data structure\n                if 'judul' in book_data:\n                    # New structure\n                    books.append(cls(\n                        id=book_data['id'],\n                        judul=book_data['judul'],\n                        penulis=book_data['penulis'],\n                        tag=book_data['tag'],\n                        foto=book_data['foto'],\n                        deskripsi_singkat=book_data['deskripsi_singkat']\n                    ))\n                else:\n                    # Old structure - convert to new\n                    books.append(cls(\n                        id=book_data['id'],\n                        judul=book_data['title'],\n                        penulis=book_data['author'],\n                        tag=book_data['genre'],\n                        foto=book_data['cover_image'],\n                        deskripsi_singkat=book_data['description']\n                    ))\n            return books\n\n    @classmethod\n    def get(cls, book_id):\n        books = cls.get_all()\n        for book in books:\n            if book.id == book_id:\n                return book\n        return None\n\n    @classmethod\n    def get_random(cls, count=6):\n        books = cls.get_all()\n        if len(books) <= count:\n            return books\n        return random.sample(books, count)\n\n    @classmethod\n    def get_by_genre(cls, tags, exclude_ids=None):\n        if exclude_ids is None:\n            exclude_ids = []\n        books = cls.get_all()\n        filtered_books = []\n        for book in books:\n            if book.id not in exclude_ids:\n                # Check if any of the book's tags match the requested tags\n                if any(tag in book.tag for tag in tags):\n                    filtered_books.append(book)\n        return filtered_books\n\n    @classmethod\n    def get_recommendations_for_user(cls, user):\n        if not user.favorites:\n            # If no favorites, return random books\n            return cls.get_random(6)\n\n        # Get favorite books and extract tags\n        favorite_tags = set()\n        for fav_id in user.favorites:\n            book = cls.get(fav_id)\n            if book:\n                favorite_tags.update(book.tag)\n\n        if not favorite_tags:\n            return cls.get_random(6)\n\n        # Get books that match favorite tags (excluding already favorited)\n        recommended_books = cls.get_by_genre(list(favorite_tags), exclude_ids=user.favorites)\n\n        # If we don't have enough recommendations, add some random books\n        if len(recommended_books) < 6:\n            random_books = cls.get_random(6 - len(recommended_books))\n            for book in random_books:\n                if book.id not in user.favorites and book not in recommended_books:\n                    recommended_books.append(book)\n\n        # Shuffle and limit to 6\n        random.shuffle(recommended_books)\n        return recommended_books[:6]\n\n    def save(self):\n        \"\"\"Save or update the book in the JSON file\"\"\"\n        books = Book.get_all()\n        # Update existing book or add new book\n        for i, book in enumerate(books):\n            if book.id == self.id:\n                books[i] = self\n                break\n        else:\n            books.append(self)\n\n        # Save to file\n        books_data = []\n        for book in books:\n            books_data.append({\n                'id': book.id,\n                'judul': book.judul,\n                'penulis': book.penulis,\n                'tag': book.tag,\n                'foto': book.foto,\n                'deskripsi_singkat': book.deskripsi_singkat\n            })\n\n        with open(self.get_books_file(), 'w', encoding='utf-8') as f:\n            json.dump(books_data, f, indent=2, ensure_ascii=False)\n\n    @classmethod\n    def create(cls, judul, penulis, tag, foto, deskripsi_singkat):\n        \"\"\"Create a new book and save it\"\"\"\n        # Generate new ID\n        books = cls.get_all()\n        max_id = 0\n        for book in books:\n            try:\n                book_id = int(book.id)\n                if book_id > max_id:\n                    max_id = book_id\n            except ValueError:\n                pass\n\n        new_id = str(max_id + 1)\n\n        book = cls(\n            id=new_id,\n            judul=judul,\n            penulis=penulis,\n            tag=tag,\n            foto=foto,\n            deskripsi_singkat=deskripsi_singkat\n        )\n        book.save()\n        return book\n\n    def update(self, judul, penulis, tag, foto, deskripsi_singkat):\n        \"\"\"Update book details and save\"\"\"\n        self.judul = judul\n        self.penulis = penulis\n        self.tag = tag\n        self.foto = foto\n        self.deskripsi_singkat = deskripsi_singkat\n\n        # Update backward compatibility properties\n        self.title = judul\n        self.author = penulis\n        self.genre = tag\n        self.cover_image = foto\n        self.description = deskripsi_singkat\n\n        self.save()\n\n    @classmethod\n    def delete(cls, book_id):\n        \"\"\"Delete a book by ID\"\"\"\n        books = cls.get_all()\n        books = [book for book in books if book.id != book_id]\n\n        # Save updated list\n        books_data = []\n        for book in books:\n            books_data.append({\n                'id': book.id,\n                'judul': book.judul,\n                'penulis': book.penulis,\n                'tag': book.tag,\n                'foto': book.foto,\n                'deskripsi_singkat': book.deskripsi_singkat\n            })\n\n        with open(cls.get_books_file(), 'w', encoding='utf-8') as f:\n            json.dump(books_data, f, indent=2, ensure_ascii=False)\n\n        return True","size_bytes":6513},"app/models/user.py":{"content":"import json\nimport os\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport uuid\n\nclass User(UserMixin):\n    def __init__(self, id, nama, email, password_hash, favorites=None, profile_image=None, role='pengguna'):\n        self.id = id\n        self.nama = nama\n        self.email = email\n        self.password_hash = password_hash\n        self.favorites = favorites or []\n        self.profile_image = profile_image or 'https://via.placeholder.com/40x40/6b7280/ffffff?text=User'\n        self.role = role\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    @staticmethod\n    def get_users_file():\n        return 'data/users.json'\n    \n    @classmethod\n    def get_all(cls):\n        if not os.path.exists(cls.get_users_file()):\n            return []\n        with open(cls.get_users_file(), 'r', encoding='utf-8') as f:\n            users_data = json.load(f)\n            return [cls(**user_data) for user_data in users_data]\n    \n    @classmethod\n    def get(cls, user_id):\n        users = cls.get_all()\n        for user in users:\n            if user.id == user_id:\n                return user\n        return None\n    \n    @classmethod\n    def get_by_email(cls, email):\n        users = cls.get_all()\n        for user in users:\n            if user.email == email:\n                return user\n        return None\n    \n    def save(self):\n        users = User.get_all()\n        # Update existing user or add new user\n        for i, user in enumerate(users):\n            if user.id == self.id:\n                users[i] = self\n                break\n        else:\n            users.append(self)\n        \n        # Save to file\n        users_data = []\n        for user in users:\n            users_data.append({\n                'id': user.id,\n                'nama': user.nama,\n                'email': user.email,\n                'password_hash': user.password_hash,\n                'favorites': user.favorites,\n                'profile_image': user.profile_image,\n                'role': getattr(user, 'role', 'pengguna')\n            })\n        \n        with open(self.get_users_file(), 'w', encoding='utf-8') as f:\n            json.dump(users_data, f, indent=2, ensure_ascii=False)\n    \n    @classmethod\n    def create(cls, nama, email, password):\n        password_hash = generate_password_hash(password)\n        user = cls(\n            id=str(uuid.uuid4()),\n            nama=nama,\n            email=email,\n            password_hash=password_hash\n        )\n        user.save()\n        return user\n    \n    def add_favorite(self, book_id):\n        if book_id not in self.favorites:\n            self.favorites.append(book_id)\n            self.save()\n    \n    def remove_favorite(self, book_id):\n        if book_id in self.favorites:\n            self.favorites.remove(book_id)\n            self.save()\n    \n    def is_favorite(self, book_id):\n        return book_id in self.favorites\n    \n    def is_admin(self):\n        return self.role == 'admin'\n    \n    def is_pengguna(self):\n        return self.role == 'pengguna'\n    \n    def update(self, nama=None, email=None, role=None, password=None):\n        \"\"\"Update user information\"\"\"\n        if nama is not None:\n            self.nama = nama\n        if email is not None:\n            self.email = email\n        if role is not None:\n            self.role = role\n        if password is not None:\n            self.password_hash = generate_password_hash(password)\n        self.save()\n    \n    @classmethod\n    def delete(cls, user_id):\n        \"\"\"Delete a user by ID\"\"\"\n        users = cls.get_all()\n        users = [user for user in users if user.id != user_id]\n        \n        # Save updated users list\n        users_data = []\n        for user in users:\n            users_data.append({\n                'id': user.id,\n                'nama': user.nama,\n                'email': user.email,\n                'password_hash': user.password_hash,\n                'favorites': user.favorites,\n                'profile_image': user.profile_image,\n                'role': getattr(user, 'role', 'pengguna')\n            })\n        \n        # Ensure directory exists\n        os.makedirs(os.path.dirname(cls.get_users_file()), exist_ok=True)\n        \n        with open(cls.get_users_file(), 'w', encoding='utf-8') as f:\n            json.dump(users_data, f, indent=2, ensure_ascii=False)","size_bytes":4436},"static/css/style.css":{"content":"/* Custom CSS for RekoBuku */\n\n:root {\n    --primary-color: #4f46e5;\n    --secondary-color: #6b7280;\n    --success-color: #059669;\n    --warning-color: #d97706;\n    --danger-color: #dc2626;\n    --light-bg: #f8fafc;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n    background-color: var(--light-bg);\n}\n\n/* Navigation */\n.navbar-brand {\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.nav-link {\n    font-weight: 500;\n    transition: color 0.2s ease;\n}\n\n.nav-link:hover {\n    color: var(--primary-color) !important;\n}\n\n.nav-link.active {\n    color: var(--primary-color) !important;\n    font-weight: 600;\n}\n\n/* Book Cards */\n.book-card {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    border: none;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.book-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 24px rgba(0,0,0,0.15);\n}\n\n.book-cover {\n    height: 200px;\n    object-fit: cover;\n    border-radius: 0.375rem 0.375rem 0 0;\n}\n\n.book-card .card-title {\n    font-size: 0.9rem;\n    font-weight: 600;\n    line-height: 1.3;\n    height: 2.6rem;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n}\n\n.book-card .card-text {\n    font-size: 0.8rem;\n    margin-bottom: 0.5rem;\n}\n\n/* Buttons */\n.btn {\n    font-weight: 500;\n    border-radius: 0.5rem;\n    transition: all 0.2s ease;\n}\n\n.btn-primary {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.btn-primary:hover {\n    background-color: #3730a3;\n    border-color: #3730a3;\n    transform: translateY(-1px);\n}\n\n.btn-outline-primary:hover {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    transform: translateY(-1px);\n}\n\n.btn-outline-danger:hover {\n    transform: translateY(-1px);\n}\n\n/* Genre badges */\n.badge {\n    font-size: 0.7rem;\n    font-weight: 500;\n}\n\n/* Cards */\n.card {\n    border: none;\n    border-radius: 0.75rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n}\n\n.card-body {\n    padding: 1.5rem;\n}\n\n/* Forms */\n.form-control {\n    border-radius: 0.5rem;\n    border: 1.5px solid #e5e7eb;\n    padding: 0.75rem 1rem;\n    transition: border-color 0.2s ease, box-shadow 0.2s ease;\n}\n\n.form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.15);\n}\n\n.form-label {\n    font-weight: 600;\n    color: #374151;\n    margin-bottom: 0.5rem;\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 0.75rem;\n    font-weight: 500;\n}\n\n/* Hero section */\n.display-4 {\n    font-weight: 800;\n    letter-spacing: -0.025em;\n}\n\n.lead {\n    font-size: 1.125rem;\n    font-weight: 400;\n}\n\n/* Profile image */\n.rounded-circle {\n    border: 2px solid #e5e7eb;\n}\n\n/* Mobile Navigation Styles */\n.mobile-header {\n    position: sticky;\n    top: 0;\n    z-index: 1020;\n}\n\n.mobile-profile img {\n    border: 2px solid var(--primary-color);\n}\n\n/* Mobile Bottom Navigation */\n.mobile-bottom-nav {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: white;\n    border-top: 1px solid #e5e7eb;\n    padding: 0.5rem 0;\n    z-index: 1030;\n    box-shadow: 0 -4px 20px rgba(0,0,0,0.1);\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 70px;\n}\n\n.mobile-bottom-nav .nav-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0.5rem 0.75rem;\n    text-decoration: none;\n    color: #6b7280;\n    transition: all 0.2s ease;\n    border-radius: 0.5rem;\n    min-width: 60px;\n}\n\n.mobile-bottom-nav .nav-item:hover {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.1);\n    text-decoration: none;\n}\n\n.mobile-bottom-nav .nav-item.active {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.15);\n}\n\n.mobile-bottom-nav .nav-item i {\n    font-size: 1.2rem;\n    margin-bottom: 0.25rem;\n}\n\n.mobile-bottom-nav .nav-item span {\n    font-size: 0.75rem;\n    font-weight: 500;\n    text-align: center;\n}\n\n/* Main content margin for mobile with bottom nav */\n@media (max-width: 991px) {\n    .main-content {\n        padding-bottom: 20px; /* Reduced since body also has padding */\n    }\n}\n\n/* Body padding for mobile to prevent footer overlap - only when authenticated */\n@media (max-width: 991px) {\n    body.authenticated {\n        padding-bottom: 80px;\n    }\n\n    body:not(.authenticated) {\n        padding-bottom: 0;\n    }\n}\n\n/* Horizontal Scroll for Books */\n.horizontal-scroll {\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    scrollbar-width: none; /* Firefox */\n    scroll-snap-type: x mandatory;\n    scroll-padding-left: 0.5rem;\n}\n\n/* Hide scrollbar for WebKit browsers */\n.horizontal-scroll::-webkit-scrollbar {\n    display: none;\n}\n\n.book-cards-container {\n    display: flex;\n    gap: 1rem;\n    padding: 0.5rem;\n    min-width: max-content;\n}\n\n.book-card-mobile {\n    flex: 0 0 auto;\n    scroll-snap-align: start;\n    width: 140px; /* Fixed width for better appearance */\n}\n\n/* Mobile specific adjustments */\n@media (max-width: 991px) {\n    .book-card-mobile {\n        width: 140px; /* Consistent width on mobile */\n    }\n}\n\n/* Very small screens */\n@media (max-width: 480px) {\n    .book-card-mobile {\n        width: 150px; /* Made wider for better proportion */\n    }\n\n    .book-cards-container {\n        gap: 0.75rem; /* Reduce gap on small screens */\n        padding: 0.5rem 0.75rem; /* Reduce horizontal padding */\n    }\n\n    .book-cover-mobile {\n        height: 180px; /* Reduced height for better proportion on small screens */\n    }\n}\n\n.book-card-mobile .card {\n    width: 100%;\n    border-radius: 1rem;\n}\n\n.book-cover-mobile {\n    height: 200px;\n    object-fit: cover;\n    border-radius: 1rem 1rem 0 0;\n}\n\n.book-card-mobile .card-body {\n    padding: 1rem 0.75rem;\n}\n\n.book-card-mobile .card-title {\n    font-size: 0.85rem;\n    line-height: 1.2;\n    height: 2.4rem;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n}\n\n.book-card-mobile .card-text {\n    font-size: 0.75rem;\n}\n\n.book-card-mobile .badge {\n    font-size: 0.65rem;\n    padding: 0.25rem 0.4rem;\n}\n\n.book-card-mobile .btn {\n    font-size: 0.75rem;\n    padding: 0.4rem 0.75rem;\n    border-radius: 0.5rem;\n}\n\n/* Desktop book card styles */\n.book-card-desktop {\n    flex: 0 0 auto;\n    scroll-snap-align: start;\n    width: 260px; /* Made wider for better desktop experience */\n}\n\n.book-cover-desktop {\n    height: 240px; /* Reduced height for better proportion */\n    object-fit: cover;\n    border-radius: 0.375rem 0.375rem 0 0;\n}\n\n.book-card-desktop .card {\n    width: 100%;\n    border-radius: 1rem;\n}\n\n.book-card-desktop .card-body {\n    padding: 1.25rem;\n}\n\n.book-card-desktop .card-title {\n    font-size: 0.95rem;\n    line-height: 1.3;\n    height: 2.6rem;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    font-weight: 600;\n}\n\n.book-card-desktop .card-text {\n    font-size: 0.85rem;\n}\n\n.book-card-desktop .badge {\n    font-size: 0.7rem;\n    padding: 0.25rem 0.5rem;\n}\n\n.book-card-desktop .btn {\n    font-size: 0.8rem;\n    padding: 0.5rem 0.8rem;\n    border-radius: 0.5rem;\n}\n\n/* Desktop responsive improvements */\n@media (min-width: 992px) {\n    .main-content {\n        padding-bottom: 0;\n    }\n\n    body {\n        padding-bottom: 0;\n    }\n\n    /* Enable horizontal scroll on desktop */\n    .horizontal-scroll {\n        display: block;\n        overflow-x: auto;\n        cursor: grab;\n    }\n\n    .horizontal-scroll:active {\n        cursor: grabbing;\n    }\n\n    /* Desktop book cards container */\n    .book-cards-container {\n        display: flex;\n        gap: 1.5rem;\n        padding: 0.5rem 0.25rem;\n    }\n\n    /* Improve scrolling experience on desktop */\n    .horizontal-scroll {\n        padding-bottom: 10px;\n        margin-bottom: -10px;\n    }\n}\n\n/* Footer */\nfooter {\n    margin-top: auto;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .book-card .card-title {\n        font-size: 0.85rem;\n        height: auto;\n        -webkit-line-clamp: 3;\n    }\n\n    .display-4 {\n        font-size: 2rem;\n    }\n\n    .lead {\n        font-size: 1rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .container {\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n\n    .book-cover {\n        height: 180px;\n    }\n}\n\n/* Animation for favorite button */\n.book-favorite-btn {\n    position: relative;\n    overflow: hidden;\n}\n\n.book-favorite-btn.favorited {\n    background-color: var(--danger-color);\n    border-color: var(--danger-color);\n    color: white;\n}\n\n/* Loading state */\n.btn-loading {\n    position: relative;\n    color: transparent;\n}\n\n.btn-loading::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 50%;\n    left: 50%;\n    margin-left: -8px;\n    margin-top: -8px;\n    border: 2px solid #ffffff;\n    border-radius: 50%;\n    border-top-color: transparent;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n/* Admin Panel Styles */\n.admin-sidebar {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    padding: 0;\n    box-shadow: 2px 0 10px rgba(0,0,0,0.1);\n}\n\n.admin-brand {\n    padding: 1.5rem;\n    border-bottom: 1px solid rgba(255,255,255,0.1);\n    margin-bottom: 1rem;\n}\n\n.admin-brand h4 {\n    color: white;\n    margin: 0;\n    font-weight: 600;\n}\n\n.admin-nav {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.admin-nav li {\n    margin-bottom: 0.5rem;\n}\n\n.admin-nav a {\n    display: block;\n    padding: 12px 24px;\n    color: rgba(255,255,255,0.9);\n    text-decoration: none;\n    border-radius: 0 25px 25px 0;\n    margin-right: 20px;\n    transition: all 0.3s ease;\n    font-weight: 500;\n}\n\n.admin-nav a:hover {\n    background: rgba(255,255,255,0.1);\n    color: white;\n    transform: translateX(5px);\n}\n\n.admin-nav a.active {\n    background: rgba(255,255,255,0.2);\n    color: white;\n}\n\n.admin-nav i {\n    margin-right: 10px;\n    width: 20px;\n    text-align: center;\n}\n\n.admin-content {\n    padding: 0;\n    background: #f8f9fa;\n    min-height: 100vh;\n}\n\n.admin-header {\n    background: white;\n    padding: 1rem 2rem;\n    border-bottom: 1px solid #dee2e6;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.admin-page-title {\n    color: #2c3e50;\n    font-weight: 700;\n    margin: 0;\n    font-size: 2rem;\n}\n\n.admin-page-subtitle {\n    color: #6c757d;\n    margin: 0.5rem 0 0 0;\n}\n\n/* Fix form text colors */\n.form-label {\n    color: #2c3e50 !important;\n    font-weight: 600;\n}\n\n.form-control, .form-select {\n    color: #2c3e50 !important;\n    background-color: white !important;\n}\n\n.form-control:focus, .form-select:focus {\n    color: #2c3e50 !important;\n    background-color: white !important;\n    border-color: #667eea;\n    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n}\n\n.form-text {\n    color: #6c757d !important;\n}\n\n.card-title {\n    color: #2c3e50 !important;\n}\n\n.text-muted {\n    color: #6c757d !important;\n}\n\n/* Choices.js styling fixes */\n.choices__inner {\n    background-color: white !important;\n    color: #2c3e50 !important;\n    border: 1px solid #ced4da !important;\n}\n\n.choices__input {\n    color: #2c3e50 !important;\n    background-color: transparent !important;\n}\n\n.choices__item {\n    color: #2c3e50 !important;\n}\n\n.choices__item--choice {\n    color: #2c3e50 !important;\n}\n\n.choices__item--selectable {\n    color: #2c3e50 !important;\n}\n\n.choices__placeholder {\n    color: #6c757d !important;\n}\n\n.choices__list--dropdown .choices__item--selectable {\n    color: #2c3e50 !important;\n}\n\n.choices__list--dropdown .choices__item--selectable:hover {\n    background-color: #667eea !important;\n    color: white !important;\n}\n\n/* Admin Panel Styles */\n.admin-panel {\n    background-color: var(--light-bg);\n}\n\n/* Admin Navigation */\n.admin-navbar {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    box-shadow: 0 4px 16px rgba(79, 70, 229, 0.15);\n}\n\n.admin-navbar .navbar-brand {\n    color: white !important;\n    font-weight: 700;\n}\n\n.admin-navbar .navbar-nav .nav-link {\n    color: rgba(255, 255, 255, 0.9) !important;\n    font-weight: 500;\n    padding: 0.5rem 1rem;\n    border-radius: 0.5rem;\n    margin: 0 0.25rem;\n    transition: all 0.2s ease;\n}\n\n.admin-navbar .navbar-nav .nav-link:hover {\n    color: white !important;\n    background-color: rgba(255, 255, 255, 0.15);\n}\n\n.admin-navbar .navbar-nav .nav-link.active {\n    color: white !important;\n    background-color: rgba(255, 255, 255, 0.2);\n    font-weight: 600;\n}\n\n/* Admin Bottom Navigation */\n.admin-bottom-nav {\n    background: white;\n    border-top: 1px solid #e5e7eb;\n    box-shadow: 0 -4px 20px rgba(0,0,0,0.1);\n}\n\n.admin-bottom-nav .nav-item {\n    color: var(--secondary-color);\n}\n\n.admin-bottom-nav .nav-item:hover {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.1);\n}\n\n.admin-bottom-nav .nav-item.active {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.15);\n}\n\n/* Admin Cards */\n.admin-panel .card {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    border: none;\n    border-radius: 1rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.08);\n}\n\n.admin-panel .card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(0,0,0,0.15);\n}\n\n.admin-panel .card-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    color: white;\n    border: none;\n    border-radius: 1rem 1rem 0 0 !important;\n    padding: 1.25rem 1.5rem;\n}\n\n.admin-panel .card-header h5 {\n    margin-bottom: 0;\n    font-weight: 600;\n}\n\n.admin-panel .card-body {\n    padding: 1.5rem;\n}\n\n/* Admin Statistics Cards */\n.admin-stat-card {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    border: none;\n    border-radius: 1rem;\n    color: white;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.admin-stat-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(79, 70, 229, 0.3);\n}\n\n.admin-stat-card.bg-success {\n    background: linear-gradient(135deg, var(--success-color) 0%, #10b981 100%) !important;\n}\n\n.admin-stat-card.bg-warning {\n    background: linear-gradient(135deg, var(--warning-color) 0%, #f59e0b 100%) !important;\n}\n\n.admin-stat-card.bg-info {\n    background: linear-gradient(135deg, #0ea5e9 0%, #3b82f6 100%) !important;\n}\n\n/* Admin Tables */\n.admin-panel .table-responsive {\n    border-radius: 0.75rem;\n    overflow: hidden;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.08);\n}\n\n.admin-panel .table {\n    margin-bottom: 0;\n}\n\n.admin-panel .table th {\n    font-weight: 600;\n    border-top: none;\n    background-color: var(--primary-color);\n    color: white;\n    padding: 1rem;\n}\n\n.admin-panel .table td {\n    padding: 1rem;\n    border-color: #f1f5f9;\n}\n\n.admin-panel .table tbody tr:hover {\n    background-color: rgba(79, 70, 229, 0.05);\n}\n\n/* Admin Buttons */\n.admin-panel .btn-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    border: none;\n    font-weight: 600;\n    padding: 0.75rem 1.5rem;\n    border-radius: 0.75rem;\n}\n\n.admin-panel .btn-primary:hover {\n    background: linear-gradient(135deg, #3730a3 0%, #4f46e5 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 24px rgba(79, 70, 229, 0.3);\n}\n\n.admin-panel .btn-outline-primary {\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n    font-weight: 600;\n    border-radius: 0.75rem;\n}\n\n.admin-panel .btn-outline-primary:hover {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    transform: translateY(-2px);\n}\n\n/* Admin Action Cards */\n.admin-action-card {\n    border: 2px solid #e5e7eb;\n    border-radius: 1rem;\n    transition: all 0.2s ease;\n    background: white;\n}\n\n.admin-action-card:hover {\n    border-color: var(--primary-color);\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(79, 70, 229, 0.15);\n}\n\n.admin-action-card .card-body {\n    padding: 2rem;\n}\n\n/* Mobile admin adjustments */\n@media (max-width: 991px) {\n    .admin-panel .card-body {\n        padding: 1rem;\n    }\n\n    .admin-panel .btn-group-sm .btn {\n        padding: 0.25rem 0.4rem;\n        font-size: 0.7rem;\n        border-radius: 0.375rem;\n    }\n\n    .admin-panel .table-responsive {\n        font-size: 0.85rem;\n    }\n\n    .admin-panel .table th,\n    .admin-panel .table td {\n        padding: 0.75rem 0.5rem;\n    }\n\n    .admin-action-card .card-body {\n        padding: 1.25rem;\n    }\n\n    .admin-stat-card .card-body {\n        padding: 1.25rem;\n    }\n\n    /* Mobile dashboard specific */\n    .admin-stat-card h3 {\n        font-size: 1.5rem;\n    }\n\n    .admin-stat-card .card-text {\n        font-size: 0.8rem;\n    }\n\n    .admin-stat-card .fas {\n        font-size: 1.5rem !important;\n    }\n\n    .admin-action-card-mobile {\n        border: 2px solid #e5e7eb;\n        transition: all 0.2s ease;\n        background: white !important;\n    }\n\n    .admin-action-card-mobile:hover {\n        border-color: var(--primary-color);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 16px rgba(79, 70, 229, 0.15);\n    }\n}\n\n/* Very small mobile adjustments */\n@media (max-width: 480px) {\n    .admin-stat-card h3 {\n        font-size: 1.25rem;\n    }\n\n    .admin-stat-card .card-text {\n        font-size: 0.75rem;\n    }\n\n    .admin-action-card-mobile {\n        padding: 1rem !important;\n    }\n\n    .admin-action-card-mobile h6 {\n        font-size: 0.9rem;\n    }\n\n    .admin-action-card-mobile .btn {\n        font-size: 0.8rem;\n        padding: 0.5rem 1rem;\n    }\n}\n\n/* Admin Page Titles */\n.admin-page-title {\n    color: var(--primary-color);\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n}\n\n.admin-page-subtitle {\n    color: var(--secondary-color);\n    font-size: 1.1rem;\n}\n\n/* Admin Badges */\n.admin-panel .badge {\n    font-weight: 600;\n    padding: 0.5rem 0.75rem;\n    border-radius: 0.5rem;\n}\n\n/* Admin Form Controls */\n.admin-panel .form-control {\n    border-radius: 0.75rem;\n    border: 2px solid #e5e7eb;\n    padding: 0.75rem 1rem;\n}\n\n.admin-panel .form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.15);\n}\n\n.admin-panel .form-select {\n    border-radius: 0.75rem;\n    border: 2px solid #e5e7eb;\n    padding: 0.75rem 1rem;\n}\n\n.admin-panel .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.15);\n}\n\n/* Mobile Book List Styles */\n.mobile-book-list {\n    background: white;\n    border-radius: 1rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.08);\n    overflow: hidden;\n}\n\n.mobile-book-item {\n    padding: 1rem;\n    border-bottom: 1px solid #f1f5f9;\n    transition: background-color 0.2s ease;\n}\n\n.mobile-book-item:last-child {\n    border-bottom: none;\n}\n\n.mobile-book-item:hover {\n    background-color: rgba(79, 70, 229, 0.02);\n}\n\n.mobile-book-cover {\n    width: 50px;\n    height: 75px;\n    object-fit: cover;\n    border-radius: 0.5rem;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.15);\n}\n\n.mobile-book-title {\n    font-size: 0.95rem;\n    font-weight: 600;\n    color: #1f2937;\n    line-height: 1.3;\n    margin-bottom: 0.25rem;\n}\n\n.mobile-book-author {\n    font-size: 0.85rem;\n    color: #6b7280;\n    margin-bottom: 0.5rem;\n}\n\n.mobile-book-genres {\n    margin-bottom: 0.5rem;\n}\n\n.mobile-genre-badge {\n    font-size: 0.7rem;\n    padding: 0.25rem 0.5rem;\n    background-color: var(--primary-color);\n    color: white;\n    border-radius: 0.375rem;\n    font-weight: 500;\n}\n\n.mobile-book-rating {\n    font-size: 0.85rem;\n    color: #374151;\n}\n\n.mobile-book-rating .fas {\n    font-size: 0.8rem;\n    margin-right: 0.25rem;\n}\n\n.mobile-book-actions {\n    display: flex;\n    gap: 0.25rem;\n}\n\n.mobile-book-actions .btn {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.75rem;\n    border-radius: 0.375rem;\n}\n\n/* Very small mobile adjustments */\n@media (max-width: 480px) {\n    .mobile-book-item {\n        padding: 0.75rem;\n    }\n\n    .mobile-book-cover {\n        width: 45px;\n        height: 68px;\n    }\n\n    .mobile-book-title {\n        font-size: 0.9rem;\n    }\n\n    .mobile-book-author {\n        font-size: 0.8rem;\n    }\n\n    .mobile-book-actions .btn {\n        padding: 0.2rem 0.4rem;\n        font-size: 0.7rem;\n    }\n}\n\n/* Profile page specific styles */\n.profile-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    color: white;\n    border-radius: 0.75rem;\n    padding: 2rem;\n    margin-bottom: 2rem;\n}\n\n.profile-header .btn-outline-light {\n    border: 2px solid rgba(255, 255, 255, 0.7);\n    color: white;\n    font-weight: 600;\n    border-radius: 1.5rem;\n    padding: 0.5rem 1.5rem;\n    transition: all 0.3s ease;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n}\n\n.profile-header .btn-outline-light:hover {\n    background: rgba(255, 255, 255, 0.2);\n    border-color: white;\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 8px 20px rgba(255, 255, 255, 0.3);\n}\n\n.profile-stats {\n    background: white;\n    border-radius: 0.75rem;\n    padding: 1.5rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n}\n\n/* Book detail page */\n.book-detail-img {\n    max-width: 300px;\n    border-radius: 0.75rem;\n    box-shadow: 0 8px 32px rgba(0,0,0,0.15);\n}\n\n.book-detail-content {\n    padding-left: 2rem;\n}\n\n@media (max-width: 768px) {\n    .book-detail-content {\n        padding-left: 0;\n        margin-top: 1.5rem;\n    }\n}\n\n/* Choices.js Tag Selection Styling */\n.choices__inner--tag-select {\n    padding: 0.75rem;\n    border: 1px solid var(--bs-border-color);\n    border-radius: 0.5rem;\n    min-height: auto;\n    background-color: var(--bs-body-bg);\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.choices__inner--tag-select:focus-within {\n    border-color: var(--bs-primary);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n.choices__list--dropdown {\n    max-height: 260px;\n    border-radius: 0.5rem;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n    z-index: 1050;\n}\n\n.choices__item--choice {\n    padding: 0.75rem 1rem;\n    font-size: 0.875rem;\n    border-bottom: 1px solid var(--bs-border-color-translucent);\n    color: #000 !important;\n}\n\n.choices__item--choice:hover,\n.choices__item--choice.is-highlighted {\n    background-color: var(--bs-primary);\n    color: white !important;\n}\n\n.choices__list--dropdown .choices__item {\n    color: #000 !important;\n}\n\n.choices__list--dropdown .choices__item:hover {\n    color: white !important;\n}\n\n.choices__item--selectable {\n    padding: 0.5rem 0.75rem;\n}\n\n.choices__list--multiple .choices__item {\n    background-color: var(--bs-primary);\n    border: none;\n    border-radius: 0.375rem;\n    color: white;\n    margin-right: 0.375rem;\n    margin-bottom: 0.375rem;\n    padding: 0.375rem 0.5rem;\n    font-size: 0.75rem;\n    display: inline-flex;\n    align-items: center;\n    max-width: none;\n}\n\n.choices__button {\n    background-color: transparent;\n    border: none;\n    color: rgba(255, 255, 255, 0.8);\n    padding: 0 0 0 0.375rem;\n    margin-left: 0.25rem;\n    font-size: 0.875rem;\n    cursor: pointer;\n}\n\n.choices__button:hover {\n    color: white;\n}\n\n.choices__input--cloned {\n    background-color: transparent !important;\n    border: none !important;\n    font-size: 0.875rem;\n    padding: 0.25rem 0 !important;\n    margin: 0.25rem 0 !important;\n    min-width: 200px;\n}\n\n.choices__placeholder {\n    color: var(--bs-secondary);\n    opacity: 1;\n}\n\n/* Mobile responsiveness for tag selection */\n@media (max-width: 768px) {\n    .choices__list--dropdown {\n        max-height: 60vh;\n        position: fixed !important;\n        top: 50% !important;\n        left: 50% !important;\n        transform: translate(-50%, -50%) !important;\n        width: 90vw !important;\n        max-width: 400px;\n        border-radius: 1rem;\n        border: 1px solid var(--bs-border-color);\n        background: var(--bs-body-bg);\n        box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.25);\n        z-index: 1060;\n    }\n\n    .choices__item--choice {\n        padding: 1rem 1.25rem;\n        font-size: 1rem;\n        min-height: 44px; /* Touch-friendly size */\n        display: flex;\n        align-items: center;\n    }\n\n    .choices__list--multiple .choices__item {\n        margin-right: 0.25rem;\n        margin-bottom: 0.25rem;\n        padding: 0.5rem 0.75rem;\n        font-size: 0.8rem;\n        border-radius: 0.5rem;\n    }\n\n    .choices__input--cloned {\n        min-width: 150px;\n        font-size: 1rem;\n    }\n\n    .choices__inner--tag-select {\n        padding: 0.875rem;\n        min-height: 48px; /* Touch-friendly */\n    }\n}\n\n/* Tag count styling */\n#tag-count {\n    font-weight: 500;\n    font-size: 0.875rem;\n}","size_bytes":24647},"static/js/main.js":{"content":"// RekoBuku JavaScript Functions\n\n// Toggle favorite book\nasync function toggleFavorite(bookId) {\n    const button = document.querySelector(`.book-favorite-btn[data-book-id=\"${bookId}\"]`);\n    if (!button) return;\n    \n    // Add loading state\n    button.classList.add('btn-loading');\n    button.disabled = true;\n    \n    try {\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n        const response = await fetch(`/toggle_favorite/${bookId}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrfToken\n            }\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Update button appearance\n            const icon = button.querySelector('i');\n            const text = button.querySelector('.favorite-text');\n            \n            if (data.is_favorite) {\n                button.classList.remove('btn-outline-danger');\n                button.classList.add('btn-danger');\n                icon.classList.remove('far');\n                icon.classList.add('fas');\n                if (text) text.textContent = 'Hapus dari Favorit';\n            } else {\n                button.classList.remove('btn-danger');\n                button.classList.add('btn-outline-danger');\n                icon.classList.remove('fas');\n                icon.classList.add('far');\n                if (text) text.textContent = 'Tambahkan ke Favorit';\n            }\n            \n            // Show success message\n            showMessage(data.message, 'success');\n        } else {\n            showMessage(data.error || 'Terjadi kesalahan', 'error');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        showMessage('Terjadi kesalahan koneksi', 'error');\n    } finally {\n        // Remove loading state\n        button.classList.remove('btn-loading');\n        button.disabled = false;\n    }\n}\n\n// Show temporary message\nfunction showMessage(message, type = 'info') {\n    // Remove existing messages\n    const existingMessages = document.querySelectorAll('.temp-message');\n    existingMessages.forEach(msg => msg.remove());\n    \n    // Create new message\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show temp-message`;\n    messageDiv.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    // Insert at top of main content\n    const main = document.querySelector('main');\n    if (main) {\n        const container = document.createElement('div');\n        container.className = 'container mt-3';\n        container.appendChild(messageDiv);\n        main.insertBefore(container, main.firstChild);\n    }\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n        if (messageDiv.parentNode) {\n            messageDiv.parentNode.remove();\n        }\n    }, 5000);\n}\n\n// Initialize tooltips and other Bootstrap components\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize Bootstrap tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n    \n    // Initialize Bootstrap popovers\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    popoverTriggerList.map(function(popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n    \n    // Auto-dismiss alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.temp-message)');\n    alerts.forEach(alert => {\n        if (!alert.classList.contains('alert-danger')) {\n            setTimeout(() => {\n                const alertInstance = bootstrap.Alert.getOrCreateInstance(alert);\n                if (alertInstance) {\n                    alertInstance.close();\n                }\n            }, 5000);\n        }\n    });\n});\n\n// Smooth scroll for anchor links\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function(e) {\n        e.preventDefault();\n        const target = document.querySelector(this.getAttribute('href'));\n        if (target) {\n            target.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        }\n    });\n});\n\n// Add loading states to form submissions\ndocument.querySelectorAll('form').forEach(form => {\n    form.addEventListener('submit', function() {\n        const submitButton = form.querySelector('button[type=\"submit\"], input[type=\"submit\"]');\n        if (submitButton) {\n            submitButton.classList.add('btn-loading');\n            submitButton.disabled = true;\n        }\n    });\n});","size_bytes":4957},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)","size_bytes":99},"app/forms/user.py":{"content":"\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, SelectField, SubmitField, PasswordField\nfrom wtforms.validators import DataRequired, Email, Length, Optional, ValidationError\nfrom app.models.user import User\n\nclass UserForm(FlaskForm):\n    nama = StringField('Nama Lengkap', validators=[\n        DataRequired(message='Nama harus diisi'),\n        Length(min=2, max=50, message='Nama harus antara 2-50 karakter')\n    ])\n    email = StringField('Email', validators=[\n        DataRequired(message='Email harus diisi'),\n        Email(message='Format email tidak valid')\n    ])\n    role = SelectField('Role', choices=[\n        ('pengguna', 'Pengguna'),\n        ('admin', 'Admin')\n    ], validators=[DataRequired(message='Role harus dipilih')])\n    password = PasswordField('Password', validators=[\n        DataRequired(message='Password harus diisi'),\n        Length(min=6, message='Password minimal 6 karakter')\n    ])\n    submit = SubmitField('Simpan')\n    \n    def validate_email(self, email):\n        user = User.get_by_email(email.data)\n        if user:\n            raise ValidationError('Email sudah terdaftar. Silakan gunakan email lain.')\n\nclass EditUserForm(FlaskForm):\n    nama = StringField('Nama Lengkap', validators=[\n        DataRequired(message='Nama harus diisi'),\n        Length(min=2, max=50, message='Nama harus antara 2-50 karakter')\n    ])\n    email = StringField('Email', validators=[\n        DataRequired(message='Email harus diisi'),\n        Email(message='Format email tidak valid')\n    ])\n    role = SelectField('Role', choices=[\n        ('pengguna', 'Pengguna'),\n        ('admin', 'Admin')\n    ], validators=[DataRequired(message='Role harus dipilih')])\n    password = PasswordField('Password Baru', validators=[\n        Optional(),\n        Length(min=6, message='Password minimal 6 karakter')\n    ])\n    submit = SubmitField('Update')\n    \n    def __init__(self, original_email=None, *args, **kwargs):\n        super(EditUserForm, self).__init__(*args, **kwargs)\n        self.original_email = original_email\n    \n    def validate_email(self, email):\n        if email.data != self.original_email:\n            user = User.get_by_email(email.data)\n            if user:\n                raise ValidationError('Email sudah terdaftar. Silakan gunakan email lain.')\n","size_bytes":2296},"app/models/settings.py":{"content":"import json\nimport os\n\nclass Settings:\n    _settings_file = 'data/settings.json'\n    \n    @classmethod\n    def _load_settings(cls):\n        \"\"\"Load settings from JSON file\"\"\"\n        if not os.path.exists(cls._settings_file):\n            # Create default settings if file doesn't exist\n            default_settings = {\n                \"maintenance_mode\": False,\n                \"quick_recommendations_count\": 7,\n                \"personal_recommendations_count\": 7\n            }\n            cls._save_settings(default_settings)\n            return default_settings\n        \n        try:\n            with open(cls._settings_file, 'r', encoding='utf-8') as f:\n                return json.load(f)\n        except (json.JSONDecodeError, IOError):\n            # Return default settings if file is corrupted\n            return {\n                \"maintenance_mode\": False,\n                \"quick_recommendations_count\": 7,\n                \"personal_recommendations_count\": 7\n            }\n    \n    @classmethod\n    def _save_settings(cls, settings):\n        \"\"\"Save settings to JSON file\"\"\"\n        os.makedirs(os.path.dirname(cls._settings_file), exist_ok=True)\n        with open(cls._settings_file, 'w', encoding='utf-8') as f:\n            json.dump(settings, f, ensure_ascii=False, indent=2)\n    \n    @classmethod\n    def is_maintenance_mode(cls):\n        \"\"\"Check if maintenance mode is enabled\"\"\"\n        settings = cls._load_settings()\n        return settings.get('maintenance_mode', False)\n    \n    @classmethod\n    def set_maintenance_mode(cls, enabled):\n        \"\"\"Enable or disable maintenance mode\"\"\"\n        settings = cls._load_settings()\n        settings['maintenance_mode'] = enabled\n        cls._save_settings(settings)\n        return enabled\n    \n    @classmethod\n    def get_quick_recommendations_count(cls):\n        \"\"\"Get number of quick recommendations to show\"\"\"\n        settings = cls._load_settings()\n        return settings.get('quick_recommendations_count', 7)\n    \n    @classmethod\n    def get_personal_recommendations_count(cls):\n        \"\"\"Get number of personal recommendations to show\"\"\"\n        settings = cls._load_settings()\n        return settings.get('personal_recommendations_count', 7)\n    \n    @classmethod\n    def update_recommendations_count(cls, quick_count, personal_count):\n        \"\"\"Update recommendation counts\"\"\"\n        settings = cls._load_settings()\n        settings['quick_recommendations_count'] = quick_count\n        settings['personal_recommendations_count'] = personal_count\n        cls._save_settings(settings)\n        return True","size_bytes":2577}},"version":1}