{"file_contents":{"application.py":{"content":"from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, abort\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom flask_wtf.csrf import CSRFProtect\nfrom werkzeug.utils import secure_filename\nfrom functools import wraps\nimport os\nimport logging\nfrom urllib.parse import urlparse, urljoin\n\n# Load environment variables from .env file (optional - for local development)\ntry:\n    from dotenv import load_dotenv\n    load_dotenv()\nexcept ImportError:\n    pass\n\napp = Flask(__name__)\n# Require SESSION_SECRET to be set for security\nif not os.environ.get('SESSION_SECRET'):\n    raise RuntimeError('SESSION_SECRET environment variable must be set')\napp.secret_key = os.environ.get('SESSION_SECRET')\n\n# CSRF Protection\ncsrf = CSRFProtect(app)\n\n# Flask-Login setup\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # type: ignore\nlogin_manager.login_message = 'Silakan masuk untuk mengakses halaman ini.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from app.models.user import User\n    return User.get(user_id)\n\n# Admin decorator\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated or not current_user.is_admin():\n            abort(403)\n        return f(*args, **kwargs)\n    return decorated_function\n\n# Apply maintenance check to all routes\n@app.before_request\ndef check_maintenance():\n    # Always allow access to static files and specific auth routes\n    if request.endpoint == 'static' or request.endpoint is None:\n        return None\n    \n    # Always allow access to authentication routes regardless of maintenance mode\n    if request.endpoint in ['login', 'register'] or \\\n       request.path in ['/login', '/register']:\n        return None\n        \n    # Always allow access to maintenance page\n    if request.endpoint == 'maintenance_page' or request.path == '/maintenance':\n        return None\n    \n    # Skip maintenance check for admin users\n    if current_user.is_authenticated and current_user.is_admin():\n        return None\n    \n    # Check if maintenance mode is enabled for all other routes\n    if Settings.is_maintenance_mode():\n        return render_template('maintenance.html'), 503\n\n# Import models and forms\nfrom app.models.user import User\nfrom app.models.book import Book\nfrom app.models.settings import Settings\ntry:\n    from app.services.gemini_service import GeminiBookRecommendationService\nexcept ImportError:\n    GeminiBookRecommendationService = None\nfrom app.forms.auth import LoginForm, RegisterForm\nfrom app.forms.book import BookForm, EditBookForm, AIGenerateForm\nfrom app.forms.user import UserForm, EditUserForm\n\n# Routes\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('home'))\n\n    form = LoginForm()\n    if form.validate_on_submit():\n        # Check if input is email or name\n        user = User.get_by_email(form.email.data)\n        if not user:\n            # Try to find by name\n            users = User.get_all()\n            for u in users:\n                if u.nama is not None and form.email.data and u.nama.lower() == form.email.data.lower():\n                    user = u\n                    break\n\n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('Berhasil masuk!', 'success')\n            next_page = request.args.get('next')\n            if next_page and is_safe_url(next_page):\n                return redirect(next_page)\n            elif user.is_admin():\n                return redirect(url_for('admin_dashboard'))\n            else:\n                return redirect(url_for('home'))\n        else:\n            flash('Email/nama atau password salah', 'danger')\n\n    return render_template('auth/login.html', form=form)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('home'))\n\n    form = RegisterForm()\n    if form.validate_on_submit():\n        user = User.create(\n            nama=form.nama.data,\n            email=form.email.data,\n            password=form.password.data\n        )\n        flash('Pendaftaran berhasil! Silakan masuk.', 'success')\n        return redirect(url_for('login'))\n\n    return render_template('auth/register.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Anda telah keluar', 'info')\n    return redirect(url_for('home'))\n\n# Admin Routes\n@app.route('/admin')\n@login_required\n@admin_required\ndef admin_dashboard():\n    total_users = len(User.get_all())\n    total_books = len(Book.get_all())\n    admin_users = [u for u in User.get_all() if u.is_admin()]\n    regular_users = [u for u in User.get_all() if u.is_pengguna()]\n\n    return render_template('admin/dashboard.html', \n                         total_users=total_users,\n                         total_books=total_books,\n                         admin_users=len(admin_users),\n                         regular_users=len(regular_users))\n\n@app.route('/admin/books')\n@login_required\n@admin_required\ndef admin_books():\n    books = Book.get_all()\n    return render_template('admin/books.html', books=books)\n\n@app.route('/admin/users')\n@login_required\n@admin_required\ndef admin_users():\n    users = User.get_all()\n    return render_template('admin/users.html', users=users)\n\n@app.route('/admin/nlp')\n@login_required\n@admin_required\ndef admin_nlp():\n    return render_template('admin/nlp.html')\n\n@app.route('/admin/ai-generate', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef admin_ai_generate():\n    form = AIGenerateForm()\n    extracted_data = None\n    preview_image = None\n    \n    if form.validate_on_submit():\n        try:\n            # Check if Gemini service is available\n            if GeminiBookRecommendationService is None:\n                flash('Layanan AI tidak tersedia. Pastikan GEMINI_API_KEY sudah diatur.', 'danger')\n                return redirect(url_for('admin_ai_generate'))\n            \n            # Read image data\n            image_file = form.foto.data\n            image_data = image_file.read()\n            \n            # Detect MIME type and file extension\n            import imghdr\n            import time\n            \n            # Determine image type\n            image_type = imghdr.what(None, h=image_data)\n            if image_type is None:\n                flash('Format gambar tidak valid!', 'danger')\n                return redirect(url_for('admin_ai_generate'))\n            \n            # Map image type to MIME type and extension\n            mime_type_map = {\n                'jpeg': ('image/jpeg', 'jpg'),\n                'jpg': ('image/jpeg', 'jpg'),\n                'png': ('image/png', 'png'),\n                'gif': ('image/gif', 'gif')\n            }\n            \n            if image_type not in mime_type_map:\n                flash(f'Format gambar {image_type} tidak didukung!', 'danger')\n                return redirect(url_for('admin_ai_generate'))\n            \n            mime_type, file_ext = mime_type_map[image_type]\n            \n            # Save temporary preview image with correct extension\n            upload_folder = 'static/uploads/books'\n            os.makedirs(upload_folder, exist_ok=True)\n            \n            filename = f\"temp_preview_{int(time.time())}.{file_ext}\"\n            preview_path = os.path.join(upload_folder, filename)\n            \n            # Initialize Gemini service\n            gemini_service = GeminiBookRecommendationService()\n            \n            # Auto-crop gambar ke area buku\n            flash('Sedang mendeteksi dan memotong area buku...', 'info')\n            cropped_image_data, cropped_mime_type = gemini_service.auto_crop_book(image_data, mime_type=mime_type)\n            \n            # Save cropped image for preview\n            with open(preview_path, 'wb') as f:\n                f.write(cropped_image_data)\n            \n            preview_image = f\"/static/uploads/books/{filename}\"\n            \n            # Extract book information from cropped image\n            result = gemini_service.extract_book_info_from_image(cropped_image_data, mime_type=cropped_mime_type)\n            \n            if 'error' in result:\n                flash(f'Gagal menganalisis gambar: {result[\"error\"]}', 'danger')\n            else:\n                extracted_data = result\n                flash('Informasi buku berhasil diekstrak! Silakan periksa dan edit jika perlu.', 'success')\n                \n        except Exception as e:\n            flash(f'Terjadi kesalahan: {str(e)}', 'danger')\n    \n    return render_template('admin/ai_generate.html', \n                         form=form, \n                         extracted_data=extracted_data,\n                         preview_image=preview_image)\n\n@app.route('/admin/ai-generate/save', methods=['POST'])\n@login_required\n@admin_required\ndef admin_ai_generate_save():\n    \"\"\"Save the AI-extracted book data\"\"\"\n    try:\n        # Get data from form\n        judul = request.form.get('judul')\n        penulis = request.form.get('penulis')\n        tag = request.form.getlist('tag')\n        deskripsi_singkat = request.form.get('deskripsi_singkat')\n        foto = request.form.get('foto')  # This is the preview image path\n        \n        # Validate required fields\n        if not all([judul, penulis, tag, deskripsi_singkat]):\n            flash('Semua field harus diisi!', 'danger')\n            return redirect(url_for('admin_ai_generate'))\n        \n        # Create the book\n        Book.create(\n            judul=judul,\n            penulis=penulis,\n            tag=tag,\n            foto=foto,\n            deskripsi_singkat=deskripsi_singkat\n        )\n        \n        flash('Buku berhasil ditambahkan!', 'success')\n        return redirect(url_for('admin_books'))\n        \n    except Exception as e:\n        flash(f'Gagal menyimpan buku: {str(e)}', 'danger')\n        return redirect(url_for('admin_ai_generate'))\n\n@app.route('/admin/regenerate-book-info', methods=['POST'])\n@login_required\n@admin_required\ndef regenerate_book_info():\n    \"\"\"Regenerate book info from existing cover image\"\"\"\n    try:\n        # Check if Gemini service is available\n        if GeminiBookRecommendationService is None:\n            return jsonify({'error': 'Layanan AI tidak tersedia. Pastikan GEMINI_API_KEY sudah diatur.'}), 503\n        \n        # Get image path from request\n        data = request.get_json()\n        if not data or 'foto_path' not in data:\n            return jsonify({'error': 'Path gambar tidak ditemukan'}), 400\n        \n        foto_path = data['foto_path']\n        \n        # Remove leading slash if exists and construct full path\n        if foto_path.startswith('/'):\n            foto_path = foto_path[1:]\n        \n        # Read image file\n        try:\n            with open(foto_path, 'rb') as f:\n                image_data = f.read()\n        except FileNotFoundError:\n            return jsonify({'error': 'File gambar tidak ditemukan di server'}), 404\n        except Exception as e:\n            return jsonify({'error': f'Gagal membaca file gambar: {str(e)}'}), 500\n        \n        # Detect MIME type\n        import imghdr\n        image_type = imghdr.what(None, h=image_data)\n        if image_type is None:\n            return jsonify({'error': 'Format gambar tidak valid'}), 400\n        \n        # Map image type to MIME type\n        mime_type_map = {\n            'jpeg': 'image/jpeg',\n            'jpg': 'image/jpeg',\n            'png': 'image/png',\n            'gif': 'image/gif'\n        }\n        \n        if image_type not in mime_type_map:\n            return jsonify({'error': f'Format gambar {image_type} tidak didukung'}), 400\n        \n        mime_type = mime_type_map[image_type]\n        \n        # Initialize Gemini service\n        gemini_service = GeminiBookRecommendationService()\n        \n        # Extract book information\n        result = gemini_service.extract_book_info_from_image(image_data, mime_type=mime_type)\n        \n        if 'error' in result:\n            return jsonify({'error': result['error']}), 400\n        \n        return jsonify(result)\n        \n    except Exception as e:\n        return jsonify({'error': f'Terjadi kesalahan: {str(e)}'}), 500\n\n@app.route('/admin/settings', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef admin_settings():\n    if request.method == 'POST':\n        # Handle recommendation settings update (check this first)\n        if 'quick_count' in request.form and 'personal_count' in request.form:\n            try:\n                quick_count = int(request.form.get('quick_count', 7))\n                personal_count = int(request.form.get('personal_count', 7))\n                Settings.update_recommendations_count(quick_count, personal_count)\n                flash('Pengaturan rekomendasi berhasil diupdate!', 'success')\n            except ValueError:\n                flash('Nilai pengaturan rekomendasi tidak valid!', 'danger')\n            return redirect(url_for('admin_settings'))\n        \n        # Handle maintenance mode toggle\n        else:\n            maintenance_mode = 'maintenance_mode' in request.form\n            Settings.set_maintenance_mode(maintenance_mode)\n            \n            action = 'diaktifkan' if maintenance_mode else 'dinonaktifkan'\n            flash(f'Mode maintenance berhasil {action}!', 'success')\n            return redirect(url_for('admin_settings'))\n    \n    maintenance_status = Settings.is_maintenance_mode()\n    quick_count = Settings.get_quick_recommendations_count()\n    personal_count = Settings.get_personal_recommendations_count()\n    \n    return render_template('admin/settings.html', \n                         maintenance_status=maintenance_status,\n                         quick_count=quick_count,\n                         personal_count=personal_count)\n\n# Book Management Routes\n@app.route('/admin/books/add', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef add_book():\n    form = BookForm()\n    if form.validate_on_submit():\n        foto_path = None\n        if form.foto.data:\n            # Create upload folder if it doesn't exist\n            upload_folder = 'static/uploads/books'\n            os.makedirs(upload_folder, exist_ok=True)\n            \n            # Handle camera captured images or regular file uploads\n            if hasattr(form.foto.data, 'filename') and form.foto.data.filename:\n                filename = secure_filename(form.foto.data.filename)\n                \n                # If it's a camera capture, generate a unique filename\n                if filename == 'camera-capture.jpg':\n                    import time\n                    filename = f\"camera_capture_{int(time.time())}.jpg\"\n                \n                foto_full_path = os.path.join(upload_folder, filename)\n                form.foto.data.save(foto_full_path)\n                # Store the web-accessible path (with /static/ prefix)\n                foto_path = f\"/static/uploads/books/{filename}\"\n\n        Book.create(\n            judul=form.judul.data,\n            penulis=form.penulis.data,\n            tag=form.tag.data,\n            foto=foto_path,\n            deskripsi_singkat=form.deskripsi_singkat.data\n        )\n        flash('Buku berhasil ditambahkan!', 'success')\n        return redirect(url_for('admin_books'))\n    return render_template('admin/book_form.html', form=form, title='Tambah Buku Baru')\n\n@app.route('/admin/books/edit/<book_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef edit_book(book_id):\n    book = Book.get(book_id)\n    if not book:\n        flash('Buku tidak ditemukan', 'error')\n        return redirect(url_for('admin_books'))\n\n    form = EditBookForm(obj=book) # Use EditBookForm here\n    if form.validate_on_submit():\n        foto_path = book.foto # Keep existing photo if not updated\n        old_foto_path = book.foto  # Store old photo path for deletion\n        \n        if form.foto.data and hasattr(form.foto.data, 'filename') and form.foto.data.filename:\n            # Create upload folder if it doesn't exist\n            upload_folder = 'static/uploads/books'\n            os.makedirs(upload_folder, exist_ok=True)\n\n            # Handle camera captured images or regular file uploads\n            filename = secure_filename(form.foto.data.filename)\n            \n            # If it's a camera capture, generate a unique filename\n            if filename == 'camera-capture.jpg':\n                import time\n                filename = f\"camera_capture_{int(time.time())}.jpg\"\n\n            foto_full_path = os.path.join(upload_folder, filename)\n            form.foto.data.save(foto_full_path)\n            # Store the web-accessible path (with /static/ prefix)\n            foto_path = f\"/static/uploads/books/{filename}\"\n            \n            # Delete old cover image if it exists and is different from new one\n            if old_foto_path and old_foto_path != foto_path:\n                try:\n                    # Remove leading slash if exists\n                    old_file_path = old_foto_path[1:] if old_foto_path.startswith('/') else old_foto_path\n                    if os.path.exists(old_file_path):\n                        os.remove(old_file_path)\n                        logging.info(f\"Deleted old cover: {old_file_path}\")\n                except Exception as e:\n                    logging.error(f\"Failed to delete old cover {old_foto_path}: {str(e)}\")\n        \n        book.update(\n            judul=form.judul.data,\n            penulis=form.penulis.data,\n            tag=form.tag.data,\n            foto=foto_path,\n            deskripsi_singkat=form.deskripsi_singkat.data\n        )\n        flash('Buku berhasil diupdate!', 'success')\n        return redirect(url_for('admin_books'))\n\n    # Pre-populate form with current book data\n    if request.method == 'GET':\n        form.judul.data = book.judul\n        form.penulis.data = book.penulis\n        form.tag.data = book.tag\n        # form.foto.data = book.foto # No need to set foto.data for EditBookForm\n        form.deskripsi_singkat.data = book.deskripsi_singkat\n\n    return render_template('admin/book_form.html', form=form, title='Edit Buku', book=book)\n\n@app.route('/admin/books/delete/<book_id>', methods=['POST'])\n@login_required\n@admin_required\ndef delete_book(book_id):\n    book = Book.get(book_id)\n    if not book:\n        return jsonify({'error': 'Buku tidak ditemukan'}), 404\n\n    # Delete cover image file if exists\n    if book.foto:\n        try:\n            # Remove leading slash if exists\n            foto_file_path = book.foto[1:] if book.foto.startswith('/') else book.foto\n            if os.path.exists(foto_file_path):\n                os.remove(foto_file_path)\n                logging.info(f\"Deleted cover image: {foto_file_path}\")\n        except Exception as e:\n            logging.error(f\"Failed to delete cover image {book.foto}: {str(e)}\")\n\n    Book.delete(book_id)\n    flash('Buku berhasil dihapus!', 'success')\n    return jsonify({'success': True, 'message': 'Buku berhasil dihapus!'})\n\n# User Management Routes\n@app.route('/admin/users/add', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef add_user():\n    form = UserForm()\n    if form.validate_on_submit():\n        User.create(\n            nama=form.nama.data,\n            email=form.email.data,\n            password=form.password.data\n        )\n        # Update role if it's not the default\n        if form.role.data != 'pengguna':\n            user = User.get_by_email(form.email.data)\n            if user:\n                user.role = form.role.data\n                user.save()\n        \n        flash('Pengguna berhasil ditambahkan!', 'success')\n        return redirect(url_for('admin_users'))\n    return render_template('admin/user_form.html', form=form, title='Tambah Pengguna Baru')\n\n@app.route('/admin/users/edit/<user_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef edit_user(user_id):\n    user = User.get(user_id)\n    if not user:\n        flash('Pengguna tidak ditemukan', 'error')\n        return redirect(url_for('admin_users'))\n\n    form = EditUserForm(original_email=user.email)\n    if form.validate_on_submit():\n        password = form.password.data if form.password.data else None\n        user.update(\n            nama=form.nama.data,\n            email=form.email.data,\n            role=form.role.data,\n            password=password\n        )\n        flash('Pengguna berhasil diupdate!', 'success')\n        return redirect(url_for('admin_users'))\n\n    # Pre-populate form with current user data\n    if request.method == 'GET':\n        form.nama.data = user.nama\n        form.email.data = user.email\n        form.role.data = user.role\n\n    return render_template('admin/user_form.html', form=form, title='Edit Pengguna', user=user)\n\n@app.route('/admin/users/delete/<user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef delete_user(user_id):\n    user = User.get(user_id)\n    if not user:\n        return jsonify({'error': 'Pengguna tidak ditemukan'}), 404\n    \n    # Prevent deleting admin users\n    if user.is_admin():\n        return jsonify({'error': 'Tidak dapat menghapus pengguna admin'}), 403\n    \n    # Prevent self-deletion\n    if user.id == current_user.id:\n        return jsonify({'error': 'Tidak dapat menghapus akun sendiri'}), 403\n\n    User.delete(user_id)\n    flash('Pengguna berhasil dihapus!', 'success')\n    return jsonify({'success': True, 'message': 'Pengguna berhasil dihapus!'})\n\n@app.route('/')\ndef home():\n    # Get quick recommendations using settings\n    quick_count = Settings.get_quick_recommendations_count()\n    quick_recommendations = Book.get_random(quick_count)\n\n    # Get personalized recommendations using settings\n    personal_count = Settings.get_personal_recommendations_count()\n    if current_user.is_authenticated:\n        personal_recommendations = Book.get_recommendations_for_user(current_user)[:personal_count]\n    else:\n        personal_recommendations = Book.get_random(personal_count)\n\n    return render_template('home.html', \n                         quick_recommendations=quick_recommendations,\n                         personal_recommendations=personal_recommendations)\n\n@app.route('/jelajah')\n@login_required\ndef jelajah():\n    books = Book.get_all()\n    return render_template('jelajah.html', books=books)\n\n@app.route('/profil')\n@login_required\ndef profil():\n    # Get user's favorite books\n    favorite_books = []\n    for book_id in current_user.favorites:\n        book = Book.get(book_id)\n        if book:\n            favorite_books.append(book)\n\n    return render_template('profil.html', favorite_books=favorite_books)\n\n@app.route('/book/<book_id>')\ndef book_detail(book_id):\n    book = Book.get(book_id)\n    if not book:\n        flash('Buku tidak ditemukan', 'error')\n        return redirect(url_for('home'))\n\n    is_favorite = False\n    if current_user.is_authenticated:\n        is_favorite = current_user.is_favorite(book_id)\n\n    return render_template('book_detail.html', book=book, is_favorite=is_favorite)\n\n@app.route('/toggle_favorite/<book_id>', methods=['POST'])\n@login_required\ndef toggle_favorite(book_id):\n    book = Book.get(book_id)\n    if not book:\n        return jsonify({'error': 'Buku tidak ditemukan'}), 404\n\n    if current_user.is_favorite(book_id):\n        current_user.remove_favorite(book_id)\n        message = 'Buku dihapus dari favorit'\n        is_favorite = False\n    else:\n        current_user.add_favorite(book_id)\n        message = 'Buku ditambahkan ke favorit'\n        is_favorite = True\n\n    return jsonify({\n        'message': message,\n        'is_favorite': is_favorite\n    })\n\n@app.route('/maintenance')\ndef maintenance_page():\n    \"\"\"Dedicated maintenance page route\"\"\"\n    return render_template('maintenance.html'), 503\n\n@app.route('/nlp-recommendation', methods=['POST'])\n@login_required\ndef nlp_recommendation():\n    \"\"\"Handle NLP book recommendation requests\"\"\"\n    import logging\n    \n    try:\n        # Get query from request\n        data = request.get_json()\n        if not data or 'query' not in data:\n            logging.error(\"No query found in request\")\n            return jsonify({\"error\": \"Query tidak ditemukan\"}), 400\n        \n        user_query = data['query'].strip()\n        if not user_query:\n            logging.error(\"Empty query provided\")\n            return jsonify({\"error\": \"Query tidak boleh kosong\"}), 400\n        \n        logging.info(f\"Processing NLP query: {user_query}\")\n        \n        # Get all available books\n        all_books = Book.get_all()\n        if not all_books:\n            logging.error(\"No books available\")\n            return jsonify({\"error\": \"Belum ada buku tersedia\"}), 404\n        \n        logging.info(f\"Found {len(all_books)} books in database\")\n        \n        # Convert books to dict format for Gemini\n        books_data = []\n        for book in all_books:\n            books_data.append({\n                'id': book.id,\n                'judul': book.judul,\n                'penulis': book.penulis,\n                'tag': book.tag,\n                'deskripsi_singkat': book.deskripsi_singkat\n            })\n        \n        # Check if Gemini service is available\n        try:\n            gemini_service = GeminiBookRecommendationService()\n            logging.info(\"Gemini service initialized successfully\")\n        except Exception as init_error:\n            logging.error(f\"Failed to initialize Gemini service: {str(init_error)}\")\n            # Return user-friendly error message\n            return jsonify({\n                \"error\": \"Layanan AI rekomendasi sedang tidak tersedia. Silakan coba lagi dalam beberapa saat.\"\n            }), 503\n        \n        # Get recommendations from Gemini\n        logging.info(\"Getting recommendations from Gemini...\")\n        recommendation_result = gemini_service.get_book_recommendations(user_query, books_data)\n        \n        if 'error' in recommendation_result:\n            logging.error(f\"Gemini returned error: {recommendation_result['error']}\")\n            return jsonify({\n                \"error\": \"Layanan AI mengalami gangguan. Silakan coba dengan kata kunci yang berbeda atau coba lagi nanti.\"\n            }), 503\n        \n        # Process recommended books\n        recommended_books = []\n        reasons = {}\n        \n        if 'recommended_books' in recommendation_result:\n            logging.info(f\"Found {len(recommendation_result['recommended_books'])} recommendations\")\n            for rec in recommendation_result['recommended_books']:\n                book_id = rec.get('id')\n                book = Book.get(book_id)\n                if book:\n                    book_dict = {\n                        'id': book.id,\n                        'judul': book.judul,\n                        'penulis': book.penulis,\n                        'tag': book.tag,\n                        'foto': book.foto,\n                        'deskripsi_singkat': book.deskripsi_singkat,\n                        'is_favorite': current_user.is_favorite(book.id) if current_user.is_authenticated else False\n                    }\n                    recommended_books.append(book_dict)\n                    reasons[book.id] = rec.get('reason', '')\n        \n        # Get similar books for the first recommended book\n        similar_books = []\n        if recommended_books:\n            first_book_dict = {\n                'id': recommended_books[0]['id'],\n                'judul': recommended_books[0]['judul'],\n                'penulis': recommended_books[0]['penulis'],\n                'tag': recommended_books[0]['tag'],\n                'deskripsi_singkat': recommended_books[0]['deskripsi_singkat']\n            }\n            \n            similar_results = gemini_service.find_similar_books(first_book_dict, books_data, limit=3)\n            \n            for sim in similar_results:\n                book_id = sim.get('id')\n                book = Book.get(book_id)\n                if book:\n                    similar_books.append({\n                        'id': book.id,\n                        'judul': book.judul,\n                        'penulis': book.penulis,\n                        'tag': book.tag,\n                        'foto': book.foto,\n                        'deskripsi_singkat': book.deskripsi_singkat,\n                        'is_favorite': current_user.is_favorite(book.id) if current_user.is_authenticated else False\n                    })\n        \n        logging.info(\"Successfully processed NLP recommendation\")\n        response_data = {\n            'books': recommended_books,\n            'reasons': reasons,\n            'explanation': recommendation_result.get('explanation', 'Berikut adalah rekomendasi buku berdasarkan pertanyaan Anda:'),\n            'similar_books': similar_books\n        }\n        logging.info(f\"Response data: {response_data}\")\n        return jsonify(response_data)\n        \n    except Exception as e:\n        logging.error(f\"Unexpected error in NLP recommendation: {str(e)}\")\n        return jsonify({\"error\": f\"Terjadi kesalahan yang tidak terduga: {str(e)}\"}), 500\n\ndef is_safe_url(target):\n    \"\"\"Check if the target URL is safe for redirects (prevents open redirect attacks)\"\"\"\n    ref_url = urlparse(request.host_url)\n    test_url = urlparse(urljoin(request.host_url, target))\n    return test_url.scheme in ('http', 'https') and \\\n           ref_url.netloc == test_url.netloc\n\nif __name__ == '__main__':\n    # Use debug mode only in development\n    debug_mode = os.environ.get('FLASK_ENV') == 'development'\n    app.run(host='0.0.0.0', port=5000, debug=debug_mode)","size_bytes":29596},"main.py":{"content":"# Load environment variables from .env file (optional - for local development)\ntry:\n    from dotenv import load_dotenv\n    load_dotenv()\nexcept ImportError:\n    pass\n\nfrom application import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)","size_bytes":274},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask>=3.1.2\",\n    \"flask-login>=0.6.3\",\n    \"flask-wtf>=1.2.2\",\n    \"psycopg2-binary>=2.9.10\",\n    \"gunicorn>=23.0.0\",\n    \"werkzeug>=3.1.3\",\n    \"google-genai>=1.38.0\",\n    \"python-dotenv>=1.1.1\",\n    \"pillow>=11.3.0\",\n]\n","size_bytes":431},"replit.md":{"content":"# RekoBuku - Personal Book Recommendation System\n\n## Overview\n\nRekoBuku is a Flask-based web application that provides personalized book recommendations to users. The system allows users to browse a curated collection of Indonesian books, add favorites, and receive tailored recommendations based on their preferences. The application features user authentication, book discovery, and personal profile management with a clean, responsive interface built using Bootstrap.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templating with Flask for server-side rendering\n- **UI Framework**: Bootstrap 5 for responsive design and components\n- **Styling**: Custom CSS with CSS variables for consistent theming\n- **JavaScript**: Vanilla JavaScript for interactive features like favorite toggling\n- **Icons**: Font Awesome for consistent iconography\n\n### Backend Architecture\n- **Framework**: Flask with modular structure using blueprints pattern\n- **Authentication**: Flask-Login for session management and user authentication\n- **Security**: Flask-WTF with CSRF protection for form security\n- **Forms**: WTForms for form validation and rendering\n- **Password Security**: Werkzeug for password hashing and verification\n\n### Data Storage Solutions\n- **User Data**: JSON file-based storage (`data/users.json`) for user profiles and authentication\n- **Book Data**: JSON file-based storage (`data/books.json`) for book catalog and metadata\n- **File Structure**: Simple file-based persistence suitable for small to medium datasets\n- **Data Models**: Python classes with static methods for data access and manipulation\n\n### Authentication and Authorization\n- **Session Management**: Flask-Login with secure session handling\n- **Password Hashing**: Werkzeug's secure password hashing\n- **User Registration**: Email-based registration with validation\n- **Login Methods**: Supports both email and username login\n- **Access Control**: Login-required decorators for protected routes\n\n### Application Structure\n- **MVC Pattern**: Separation of models, views (templates), and controllers (routes)\n- **Modular Design**: Organized into packages for models, forms, and templates\n- **Static Assets**: Separate directories for CSS, JavaScript, and images\n- **Template Inheritance**: Base template system for consistent layout\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5**: CSS framework for responsive design and pre-built components\n- **Font Awesome 6**: Icon library for user interface elements\n- **CDN Delivery**: External CDN links for Bootstrap and Font Awesome resources\n\n### Python Packages\n- **Flask**: Core web framework for routing and request handling\n- **Flask-Login**: User session management and authentication\n- **Flask-WTF**: CSRF protection and form handling integration\n- **WTForms**: Form validation, rendering, and data processing\n- **Werkzeug**: Password hashing utilities and security functions\n\n### Development Dependencies\n- **Environment Variables**: Configuration through environment variables for security\n- **JSON Processing**: Built-in Python JSON library for data persistence\n- **UUID Generation**: Python UUID library for unique identifier generation\n- **OS Module**: File system operations for data file management\n\n### Static Resources\n- **Placeholder Images**: Via.placeholder.com for book cover placeholders\n- **Google Fonts**: Inter font family for typography (referenced in CSS)\n- **Local Assets**: Custom CSS and JavaScript files served from static directory\n\n## Project Status\n\n### Replit Environment Setup (October 2025)\n✅ **Successfully Imported from GitHub**: The application has been successfully imported and configured to run in the Replit environment.\n\n**Setup Changes:**\n- Renamed `app.py` to `application.py` to avoid naming conflict with the `app/` package directory\n- Updated `main.py` to import from `application` module\n- Made dotenv dependency optional for Replit environment (uses Replit secrets instead)\n- Configured workflow \"RekoBuku App\" with gunicorn on port 5000 and webview output type\n- Set up deployment configuration for autoscale deployment (production-ready)\n- Added comprehensive .gitignore for Python projects\n- All dependencies managed via uv (pyproject.toml)\n\n**Environment Variables Required:**\n- `SESSION_SECRET`: Required for Flask session management (✓ configured in Replit)\n- `GEMINI_API_KEY`: Optional - Required only if using AI-powered book recommendations\n\n**Running the Application:**\n- The app runs automatically via the configured workflow using `uv run gunicorn`\n- Access the app through the Replit webview at port 5000\n- Production-ready deployment configured for autoscale\n- Data persistence using JSON files in `data/` directory (users.json, books.json, settings.json)\n\n### Implementation Complete (September 2025)\n✅ **Fully Functional Web Application**: RekoBuku is now complete and running successfully on port 5000\n\n**Key Features Implemented:**\n- Three main navigation pages (Home, Jelajah, Profil) with proper access control\n- Custom authentication system with login/register forms\n- Book recommendation engine with quick and personalized recommendations\n- AI-powered book recommendations using Google Gemini (optional)\n- **AI Generate Feature**: Admin panel tool that uses Gemini Vision API to automatically extract book information (title, author, tags, description) from uploaded book cover images, eliminating manual data entry\n- AJAX-powered favorite book system with CSRF protection\n- Modern responsive UI with Bootstrap 5 and Font Awesome 6 icons\n- JSON-based local database for users and books\n- Security features including password hashing and session management\n- Admin panel for managing books, users, and settings\n- Maintenance mode feature for admin control\n\n**Technical Highlights:**\n- Modular Flask application structure with separate models, forms, and services\n- Complete template system with base template inheritance\n- Custom CSS styling with responsive design\n- JavaScript functionality for interactive features\n- Proper error handling and user feedback systems\n- File upload support for book covers\n- Gemini Vision integration with automatic MIME type detection (JPEG, PNG, GIF)\n- Robust JSON parsing with error handling for AI responses\n- Image preprocessing with imghdr for accurate format detection\n- Temporary preview image system with correct file extensions","size_bytes":6491},"app/__init__.py":{"content":"# This file makes app a Python package","size_bytes":38},"app/forms/__init__.py":{"content":"# This file makes forms a Python package","size_bytes":40},"app/forms/auth.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Email, EqualTo, Length, ValidationError\nfrom app.models.user import User\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email atau Nama', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    submit = SubmitField('Masuk')\n\nclass RegisterForm(FlaskForm):\n    nama = StringField('Nama Lengkap', validators=[\n        DataRequired(message='Nama harus diisi'),\n        Length(min=2, max=50, message='Nama harus antara 2-50 karakter')\n    ])\n    email = StringField('Email', validators=[\n        DataRequired(message='Email harus diisi'),\n        Email(message='Format email tidak valid')\n    ])\n    password = PasswordField('Password', validators=[\n        DataRequired(message='Password harus diisi'),\n        Length(min=6, message='Password minimal 6 karakter')\n    ])\n    confirm_password = PasswordField('Konfirmasi Password', validators=[\n        DataRequired(message='Konfirmasi password harus diisi'),\n        EqualTo('password', message='Password tidak cocok')\n    ])\n    submit = SubmitField('Daftar')\n    \n    def validate_email(self, email):\n        user = User.get_by_email(email.data)\n        if user:\n            raise ValidationError('Email sudah terdaftar. Silakan gunakan email lain.')","size_bytes":1390},"app/forms/book.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, TextAreaField, SelectMultipleField, SubmitField\nfrom wtforms.validators import DataRequired, Length\n\nclass BookForm(FlaskForm):\n    judul = StringField('Judul Buku', validators=[\n        DataRequired(message='Judul buku harus diisi'),\n        Length(min=1, max=200, message='Judul buku maksimal 200 karakter')\n    ])\n    penulis = StringField('Penulis', validators=[\n        DataRequired(message='Penulis harus diisi'),\n        Length(min=1, max=100, message='Nama penulis maksimal 100 karakter')\n    ])\n    tag = SelectMultipleField('Tag', choices=[\n        ('Algoritma', 'Algoritma'),\n        ('Struktur Data', 'Struktur Data'),\n        ('Pemrograman', 'Pemrograman'),\n        ('Basis Data', 'Basis Data'),\n        ('Kecerdasan Buatan', 'Kecerdasan Buatan'),\n        ('Pembelajaran Mesin', 'Pembelajaran Mesin'),\n        ('Sistem Operasi', 'Sistem Operasi'),\n        ('Jaringan Komputer', 'Jaringan Komputer'),\n        ('Keamanan Informatika', 'Keamanan Informatika'),\n        ('Komputasi Awan', 'Komputasi Awan'),\n        ('Data Science', 'Data Science'),\n        ('Sistem Tertanam', 'Sistem Tertanam'),\n        ('Rekayasa Perangkat Lunak', 'Rekayasa Perangkat Lunak'),\n        ('Manajemen Proyek', 'Manajemen Proyek'),\n        ('Manajemen Sumber Daya Manusia', 'Manajemen Sumber Daya Manusia'),\n        ('Akuntansi', 'Akuntansi'),\n        ('Keuangan', 'Keuangan'),\n        ('Analisis Bisnis', 'Analisis Bisnis'),\n        ('Bisnis Digital', 'Bisnis Digital'),\n        ('Pemasaran', 'Pemasaran'),\n        ('Ekonomi Mikro/Makro', 'Ekonomi Mikro/Makro'),\n        ('Perilaku Organisasi', 'Perilaku Organisasi'),\n        ('Audit Internal', 'Audit Internal'),\n        ('Teknik Lingkungan', 'Teknik Lingkungan'),\n        ('Teknik Pertambangan', 'Teknik Pertambangan'),\n        ('Teknik Elektro', 'Teknik Elektro'),\n        ('Teknik Mesin', 'Teknik Mesin'),\n        ('Sistem Proses', 'Sistem Proses'),\n        ('Kontrol Otomatis', 'Kontrol Otomatis'),\n        ('Robotika', 'Robotika'),\n        ('Arsitektur Komputer', 'Arsitektur Komputer'),\n        ('Sistem Terdistribusi', 'Sistem Terdistribusi'),\n        ('Komputasi Paralel', 'Komputasi Paralel'),\n        ('Pemrograman Web', 'Pemrograman Web'),\n        ('Pemrograman Mobile', 'Pemrograman Mobile'),\n        ('Internet of Things (IoT)', 'Internet of Things (IoT)'),\n        ('Cloud Native', 'Cloud Native'),\n        ('Containerization', 'Containerization'),\n        ('Microservices', 'Microservices'),\n        ('API Development', 'API Development'),\n        ('Testing & QA', 'Testing & QA'),\n        ('Code Review', 'Code Review'),\n        ('Version Control', 'Version Control'),\n        ('Dokumentasi Teknis', 'Dokumentasi Teknis'),\n        ('Manajemen Database', 'Manajemen Database'),\n        ('Data Warehousing', 'Data Warehousing'),\n        ('Business Intelligence', 'Business Intelligence'),\n        ('Visualisasi Data', 'Visualisasi Data'),\n        ('Statistika Terapan', 'Statistika Terapan'),\n        ('Riset Operasi', 'Riset Operasi'),\n        ('Optimasi', 'Optimasi'),\n        ('Simulasi Sistem', 'Simulasi Sistem'),\n        ('Pemodelan Matematika', 'Pemodelan Matematika'),\n        ('Kriptografi', 'Kriptografi'),\n        ('Forensik Digital', 'Forensik Digital'),\n        ('Etika Teknologi', 'Etika Teknologi'),\n        ('Hukum Siber', 'Hukum Siber'),\n        ('Manajemen Risiko TI', 'Manajemen Risiko TI'),\n        ('Tata Kelola TI', 'Tata Kelola TI'),\n        ('Audit Sistem', 'Audit Sistem')\n    ], validators=[DataRequired(message='Pilih minimal satu tag')])\n\n    foto = FileField('Foto Cover', validators=[\n        DataRequired(message='Foto cover harus diupload'),\n        FileAllowed(['jpg', 'jpeg', 'png', 'gif'], message='Format file harus JPG, JPEG, PNG, atau GIF')\n    ])\n    deskripsi_singkat = TextAreaField('Deskripsi Singkat', validators=[\n        DataRequired(message='Deskripsi singkat harus diisi'),\n        Length(min=10, max=3500, message='Deskripsi harus antara 10-3500 karakter')\n    ])\n    submit = SubmitField('Simpan Buku')\n\nclass EditBookForm(FlaskForm):\n    judul = StringField('Judul Buku', validators=[\n        DataRequired(message='Judul buku harus diisi'),\n        Length(min=1, max=200, message='Judul buku maksimal 200 karakter')\n    ])\n    penulis = StringField('Penulis', validators=[\n        DataRequired(message='Penulis harus diisi'),\n        Length(min=1, max=100, message='Nama penulis maksimal 100 karakter')\n    ])\n    tag = SelectMultipleField('Tag', choices=[\n        ('Algoritma', 'Algoritma'),\n        ('Struktur Data', 'Struktur Data'),\n        ('Pemrograman', 'Pemrograman'),\n        ('Basis Data', 'Basis Data'),\n        ('Kecerdasan Buatan', 'Kecerdasan Buatan'),\n        ('Pembelajaran Mesin', 'Pembelajaran Mesin'),\n        ('Sistem Operasi', 'Sistem Operasi'),\n        ('Jaringan Komputer', 'Jaringan Komputer'),\n        ('Keamanan Informatika', 'Keamanan Informatika'),\n        ('Komputasi Awan', 'Komputasi Awan'),\n        ('Data Science', 'Data Science'),\n        ('Sistem Tertanam', 'Sistem Tertanam'),\n        ('Rekayasa Perangkat Lunak', 'Rekayasa Perangkat Lunak'),\n        ('Manajemen Proyek', 'Manajemen Proyek'),\n        ('Manajemen Sumber Daya Manusia', 'Manajemen Sumber Daya Manusia'),\n        ('Akuntansi', 'Akuntansi'),\n        ('Keuangan', 'Keuangan'),\n        ('Analisis Bisnis', 'Analisis Bisnis'),\n        ('Bisnis Digital', 'Bisnis Digital'),\n        ('Pemasaran', 'Pemasaran'),\n        ('Ekonomi Mikro/Makro', 'Ekonomi Mikro/Makro'),\n        ('Perilaku Organisasi', 'Perilaku Organisasi'),\n        ('Audit Internal', 'Audit Internal'),\n        ('Teknik Lingkungan', 'Teknik Lingkungan'),\n        ('Teknik Pertambangan', 'Teknik Pertambangan'),\n        ('Teknik Elektro', 'Teknik Elektro'),\n        ('Teknik Mesin', 'Teknik Mesin'),\n        ('Sistem Proses', 'Sistem Proses'),\n        ('Kontrol Otomatis', 'Kontrol Otomatis'),\n        ('Robotika', 'Robotika'),\n        ('Arsitektur Komputer', 'Arsitektur Komputer'),\n        ('Sistem Terdistribusi', 'Sistem Terdistribusi'),\n        ('Komputasi Paralel', 'Komputasi Paralel'),\n        ('Pemrograman Web', 'Pemrograman Web'),\n        ('Pemrograman Mobile', 'Pemrograman Mobile'),\n        ('Internet of Things (IoT)', 'Internet of Things (IoT)'),\n        ('Cloud Native', 'Cloud Native'),\n        ('Containerization', 'Containerization'),\n        ('Microservices', 'Microservices'),\n        ('API Development', 'API Development'),\n        ('Testing & QA', 'Testing & QA'),\n        ('Code Review', 'Code Review'),\n        ('Version Control', 'Version Control'),\n        ('Dokumentasi Teknis', 'Dokumentasi Teknis'),\n        ('Manajemen Database', 'Manajemen Database'),\n        ('Data Warehousing', 'Data Warehousing'),\n        ('Business Intelligence', 'Business Intelligence'),\n        ('Visualisasi Data', 'Visualisasi Data'),\n        ('Statistika Terapan', 'Statistika Terapan'),\n        ('Riset Operasi', 'Riset Operasi'),\n        ('Optimasi', 'Optimasi'),\n        ('Simulasi Sistem', 'Simulasi Sistem'),\n        ('Pemodelan Matematika', 'Pemodelan Matematika'),\n        ('Kriptografi', 'Kriptografi'),\n        ('Forensik Digital', 'Forensik Digital'),\n        ('Etika Teknologi', 'Etika Teknologi'),\n        ('Hukum Siber', 'Hukum Siber'),\n        ('Manajemen Risiko TI', 'Manajemen Risiko TI'),\n        ('Tata Kelola TI', 'Tata Kelola TI'),\n        ('Audit Sistem', 'Audit Sistem')\n    ], validators=[DataRequired(message='Pilih minimal satu tag')])\n\n    foto = FileField('Foto Cover (Opsional)', validators=[\n        FileAllowed(['jpg', 'jpeg', 'png', 'gif'], message='Format file harus JPG, JPEG, PNG, atau GIF')\n    ])\n    deskripsi_singkat = TextAreaField('Deskripsi Singkat', validators=[\n        DataRequired(message='Deskripsi singkat harus diisi'),\n        Length(min=10, max=3500, message='Deskripsi harus antara 10-3500 karakter')\n    ])\n    submit = SubmitField('Update Buku')\n\nclass AIGenerateForm(FlaskForm):\n    foto = FileField('Upload Gambar Buku', validators=[\n        DataRequired(message='Gambar buku harus diupload'),\n        FileAllowed(['jpg', 'jpeg', 'png'], message='Format file harus JPG, JPEG, atau PNG')\n    ])\n    submit = SubmitField('Analisis dengan AI')","size_bytes":8287},"app/forms/user.py":{"content":"\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, SelectField, SubmitField, PasswordField\nfrom wtforms.validators import DataRequired, Email, Length, Optional, ValidationError\nfrom app.models.user import User\n\nclass UserForm(FlaskForm):\n    nama = StringField('Nama Lengkap', validators=[\n        DataRequired(message='Nama harus diisi'),\n        Length(min=2, max=50, message='Nama harus antara 2-50 karakter')\n    ])\n    email = StringField('Email', validators=[\n        DataRequired(message='Email harus diisi'),\n        Email(message='Format email tidak valid')\n    ])\n    role = SelectField('Role', choices=[\n        ('pengguna', 'Pengguna'),\n        ('admin', 'Admin')\n    ], validators=[DataRequired(message='Role harus dipilih')])\n    password = PasswordField('Password', validators=[\n        DataRequired(message='Password harus diisi'),\n        Length(min=6, message='Password minimal 6 karakter')\n    ])\n    submit = SubmitField('Simpan')\n    \n    def validate_email(self, email):\n        user = User.get_by_email(email.data)\n        if user:\n            raise ValidationError('Email sudah terdaftar. Silakan gunakan email lain.')\n\nclass EditUserForm(FlaskForm):\n    nama = StringField('Nama Lengkap', validators=[\n        DataRequired(message='Nama harus diisi'),\n        Length(min=2, max=50, message='Nama harus antara 2-50 karakter')\n    ])\n    email = StringField('Email', validators=[\n        DataRequired(message='Email harus diisi'),\n        Email(message='Format email tidak valid')\n    ])\n    role = SelectField('Role', choices=[\n        ('pengguna', 'Pengguna'),\n        ('admin', 'Admin')\n    ], validators=[DataRequired(message='Role harus dipilih')])\n    password = PasswordField('Password Baru', validators=[\n        Optional(),\n        Length(min=6, message='Password minimal 6 karakter')\n    ])\n    submit = SubmitField('Update')\n    \n    def __init__(self, original_email=None, *args, **kwargs):\n        super(EditUserForm, self).__init__(*args, **kwargs)\n        self.original_email = original_email\n    \n    def validate_email(self, email):\n        if email.data != self.original_email:\n            user = User.get_by_email(email.data)\n            if user:\n                raise ValidationError('Email sudah terdaftar. Silakan gunakan email lain.')\n","size_bytes":2296},"app/models/__init__.py":{"content":"# This file makes models a Python package","size_bytes":41},"app/models/book.py":{"content":"import json\nimport os\nimport random\n\nclass Book:\n    def __init__(self, id, judul, penulis, tag, foto, deskripsi_singkat):\n        self.id = id\n        self.judul = judul\n        self.penulis = penulis\n        self.tag = tag\n        self.foto = foto\n        self.deskripsi_singkat = deskripsi_singkat\n\n        # Backward compatibility properties\n        self.title = judul\n        self.author = penulis\n        self.genre = tag\n        self.cover_image = foto\n        self.description = deskripsi_singkat\n\n    @staticmethod\n    def get_books_file():\n        return 'data/books.json'\n\n    @classmethod\n    def get_all(cls):\n        if not os.path.exists(cls.get_books_file()):\n            return []\n        with open(cls.get_books_file(), 'r', encoding='utf-8') as f:\n            books_data = json.load(f)\n            books = []\n            for book_data in books_data:\n                # Handle both old and new data structure\n                if 'judul' in book_data:\n                    # New structure\n                    books.append(cls(\n                        id=book_data['id'],\n                        judul=book_data['judul'],\n                        penulis=book_data['penulis'],\n                        tag=book_data['tag'],\n                        foto=book_data['foto'],\n                        deskripsi_singkat=book_data['deskripsi_singkat']\n                    ))\n                else:\n                    # Old structure - convert to new\n                    books.append(cls(\n                        id=book_data['id'],\n                        judul=book_data['title'],\n                        penulis=book_data['author'],\n                        tag=book_data['genre'],\n                        foto=book_data['cover_image'],\n                        deskripsi_singkat=book_data['description']\n                    ))\n            return books\n\n    @classmethod\n    def get(cls, book_id):\n        books = cls.get_all()\n        for book in books:\n            if book.id == book_id:\n                return book\n        return None\n\n    @classmethod\n    def get_random(cls, count=6):\n        books = cls.get_all()\n        if len(books) <= count:\n            return books\n        return random.sample(books, count)\n\n    @classmethod\n    def get_by_genre(cls, tags, exclude_ids=None):\n        if exclude_ids is None:\n            exclude_ids = []\n        books = cls.get_all()\n        filtered_books = []\n        for book in books:\n            if book.id not in exclude_ids:\n                # Check if any of the book's tags match the requested tags\n                if any(tag in book.tag for tag in tags):\n                    filtered_books.append(book)\n        return filtered_books\n\n    @classmethod\n    def get_recommendations_for_user(cls, user):\n        if not user.favorites:\n            # If no favorites, return random books\n            return cls.get_random(6)\n\n        # Get favorite books and extract tags\n        favorite_tags = set()\n        for fav_id in user.favorites:\n            book = cls.get(fav_id)\n            if book:\n                favorite_tags.update(book.tag)\n\n        if not favorite_tags:\n            return cls.get_random(6)\n\n        # Get books that match favorite tags (excluding already favorited)\n        recommended_books = cls.get_by_genre(list(favorite_tags), exclude_ids=user.favorites)\n\n        # If we don't have enough recommendations, add some random books\n        if len(recommended_books) < 6:\n            random_books = cls.get_random(6 - len(recommended_books))\n            for book in random_books:\n                if book.id not in user.favorites and book not in recommended_books:\n                    recommended_books.append(book)\n\n        # Shuffle and limit to 6\n        random.shuffle(recommended_books)\n        return recommended_books[:6]\n\n    def save(self):\n        \"\"\"Save or update the book in the JSON file\"\"\"\n        books = Book.get_all()\n        # Update existing book or add new book\n        for i, book in enumerate(books):\n            if book.id == self.id:\n                books[i] = self\n                break\n        else:\n            books.append(self)\n\n        # Save to file\n        books_data = []\n        for book in books:\n            books_data.append({\n                'id': book.id,\n                'judul': book.judul,\n                'penulis': book.penulis,\n                'tag': book.tag,\n                'foto': book.foto,\n                'deskripsi_singkat': book.deskripsi_singkat\n            })\n\n        with open(self.get_books_file(), 'w', encoding='utf-8') as f:\n            json.dump(books_data, f, indent=2, ensure_ascii=False)\n\n    @classmethod\n    def create(cls, judul, penulis, tag, foto, deskripsi_singkat):\n        \"\"\"Create a new book and save it\"\"\"\n        # Generate new ID\n        books = cls.get_all()\n        max_id = 0\n        for book in books:\n            try:\n                book_id = int(book.id)\n                if book_id > max_id:\n                    max_id = book_id\n            except ValueError:\n                pass\n\n        new_id = str(max_id + 1)\n\n        book = cls(\n            id=new_id,\n            judul=judul,\n            penulis=penulis,\n            tag=tag,\n            foto=foto,\n            deskripsi_singkat=deskripsi_singkat\n        )\n        book.save()\n        return book\n\n    def update(self, judul, penulis, tag, foto, deskripsi_singkat):\n        \"\"\"Update book details and save\"\"\"\n        self.judul = judul\n        self.penulis = penulis\n        self.tag = tag\n        self.foto = foto\n        self.deskripsi_singkat = deskripsi_singkat\n\n        # Update backward compatibility properties\n        self.title = judul\n        self.author = penulis\n        self.genre = tag\n        self.cover_image = foto\n        self.description = deskripsi_singkat\n\n        self.save()\n\n    @classmethod\n    def delete(cls, book_id):\n        \"\"\"Delete a book by ID\"\"\"\n        books = cls.get_all()\n        books = [book for book in books if book.id != book_id]\n\n        # Save updated list\n        books_data = []\n        for book in books:\n            books_data.append({\n                'id': book.id,\n                'judul': book.judul,\n                'penulis': book.penulis,\n                'tag': book.tag,\n                'foto': book.foto,\n                'deskripsi_singkat': book.deskripsi_singkat\n            })\n\n        with open(cls.get_books_file(), 'w', encoding='utf-8') as f:\n            json.dump(books_data, f, indent=2, ensure_ascii=False)\n\n        return True","size_bytes":6513},"app/models/settings.py":{"content":"import json\nimport os\n\nclass Settings:\n    _settings_file = 'data/settings.json'\n    \n    @classmethod\n    def _load_settings(cls):\n        \"\"\"Load settings from JSON file\"\"\"\n        if not os.path.exists(cls._settings_file):\n            # Create default settings if file doesn't exist\n            default_settings = {\n                \"maintenance_mode\": False,\n                \"quick_recommendations_count\": 7,\n                \"personal_recommendations_count\": 7\n            }\n            cls._save_settings(default_settings)\n            return default_settings\n        \n        try:\n            with open(cls._settings_file, 'r', encoding='utf-8') as f:\n                return json.load(f)\n        except (json.JSONDecodeError, IOError):\n            # Return default settings if file is corrupted\n            return {\n                \"maintenance_mode\": False,\n                \"quick_recommendations_count\": 7,\n                \"personal_recommendations_count\": 7\n            }\n    \n    @classmethod\n    def _save_settings(cls, settings):\n        \"\"\"Save settings to JSON file\"\"\"\n        os.makedirs(os.path.dirname(cls._settings_file), exist_ok=True)\n        with open(cls._settings_file, 'w', encoding='utf-8') as f:\n            json.dump(settings, f, ensure_ascii=False, indent=2)\n    \n    @classmethod\n    def is_maintenance_mode(cls):\n        \"\"\"Check if maintenance mode is enabled\"\"\"\n        settings = cls._load_settings()\n        return settings.get('maintenance_mode', False)\n    \n    @classmethod\n    def set_maintenance_mode(cls, enabled):\n        \"\"\"Enable or disable maintenance mode\"\"\"\n        settings = cls._load_settings()\n        settings['maintenance_mode'] = enabled\n        cls._save_settings(settings)\n        return enabled\n    \n    @classmethod\n    def get_quick_recommendations_count(cls):\n        \"\"\"Get number of quick recommendations to show\"\"\"\n        settings = cls._load_settings()\n        return settings.get('quick_recommendations_count', 7)\n    \n    @classmethod\n    def get_personal_recommendations_count(cls):\n        \"\"\"Get number of personal recommendations to show\"\"\"\n        settings = cls._load_settings()\n        return settings.get('personal_recommendations_count', 7)\n    \n    @classmethod\n    def update_recommendations_count(cls, quick_count, personal_count):\n        \"\"\"Update recommendation counts\"\"\"\n        settings = cls._load_settings()\n        settings['quick_recommendations_count'] = quick_count\n        settings['personal_recommendations_count'] = personal_count\n        cls._save_settings(settings)\n        return True","size_bytes":2577},"app/models/user.py":{"content":"import json\nimport os\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport uuid\n\nclass User(UserMixin):\n    def __init__(self, id, nama, email, password_hash, favorites=None, profile_image=None, role='pengguna'):\n        self.id = id\n        self.nama = nama\n        self.email = email\n        self.password_hash = password_hash\n        self.favorites = favorites or []\n        self.profile_image = profile_image or 'https://via.placeholder.com/40x40/6b7280/ffffff?text=User'\n        self.role = role\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    @staticmethod\n    def get_users_file():\n        return 'data/users.json'\n    \n    @classmethod\n    def get_all(cls):\n        if not os.path.exists(cls.get_users_file()):\n            return []\n        with open(cls.get_users_file(), 'r', encoding='utf-8') as f:\n            users_data = json.load(f)\n            return [cls(**user_data) for user_data in users_data]\n    \n    @classmethod\n    def get(cls, user_id):\n        users = cls.get_all()\n        for user in users:\n            if user.id == user_id:\n                return user\n        return None\n    \n    @classmethod\n    def get_by_email(cls, email):\n        users = cls.get_all()\n        for user in users:\n            if user.email == email:\n                return user\n        return None\n    \n    def save(self):\n        users = User.get_all()\n        # Update existing user or add new user\n        for i, user in enumerate(users):\n            if user.id == self.id:\n                users[i] = self\n                break\n        else:\n            users.append(self)\n        \n        # Save to file\n        users_data = []\n        for user in users:\n            users_data.append({\n                'id': user.id,\n                'nama': user.nama,\n                'email': user.email,\n                'password_hash': user.password_hash,\n                'favorites': user.favorites,\n                'profile_image': user.profile_image,\n                'role': getattr(user, 'role', 'pengguna')\n            })\n        \n        with open(self.get_users_file(), 'w', encoding='utf-8') as f:\n            json.dump(users_data, f, indent=2, ensure_ascii=False)\n    \n    @classmethod\n    def create(cls, nama, email, password):\n        password_hash = generate_password_hash(password)\n        user = cls(\n            id=str(uuid.uuid4()),\n            nama=nama,\n            email=email,\n            password_hash=password_hash\n        )\n        user.save()\n        return user\n    \n    def add_favorite(self, book_id):\n        if book_id not in self.favorites:\n            self.favorites.append(book_id)\n            self.save()\n    \n    def remove_favorite(self, book_id):\n        if book_id in self.favorites:\n            self.favorites.remove(book_id)\n            self.save()\n    \n    def is_favorite(self, book_id):\n        return book_id in self.favorites\n    \n    def is_admin(self):\n        return self.role == 'admin'\n    \n    def is_pengguna(self):\n        return self.role == 'pengguna'\n    \n    def update(self, nama=None, email=None, role=None, password=None):\n        \"\"\"Update user information\"\"\"\n        if nama is not None:\n            self.nama = nama\n        if email is not None:\n            self.email = email\n        if role is not None:\n            self.role = role\n        if password is not None:\n            self.password_hash = generate_password_hash(password)\n        self.save()\n    \n    @classmethod\n    def delete(cls, user_id):\n        \"\"\"Delete a user by ID\"\"\"\n        users = cls.get_all()\n        users = [user for user in users if user.id != user_id]\n        \n        # Save updated users list\n        users_data = []\n        for user in users:\n            users_data.append({\n                'id': user.id,\n                'nama': user.nama,\n                'email': user.email,\n                'password_hash': user.password_hash,\n                'favorites': user.favorites,\n                'profile_image': user.profile_image,\n                'role': getattr(user, 'role', 'pengguna')\n            })\n        \n        # Ensure directory exists\n        os.makedirs(os.path.dirname(cls.get_users_file()), exist_ok=True)\n        \n        with open(cls.get_users_file(), 'w', encoding='utf-8') as f:\n            json.dump(users_data, f, indent=2, ensure_ascii=False)","size_bytes":4436},"app/services/__init__.py":{"content":"# Services package","size_bytes":18},"app/services/gemini_service.py":{"content":"\nimport json\nimport logging\nimport os\nfrom typing import List, Dict, Any, Tuple, Optional\nfrom io import BytesIO\nfrom PIL import Image\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\ntry:\n    from google import genai\n    from google.genai import types\n    GENAI_AVAILABLE = True\nexcept ImportError:\n    GENAI_AVAILABLE = False\n    logging.warning(\"Google GenAI not available\")\n\nclass GeminiBookRecommendationService:\n    def __init__(self):\n        if not GENAI_AVAILABLE:\n            raise ValueError(\"Google GenAI library is not available\")\n            \n        api_key = os.environ.get(\"GEMINI_API_KEY\")\n        if not api_key:\n            logging.error(\"GEMINI_API_KEY not found in environment variables\")\n            raise ValueError(\"GEMINI_API_KEY environment variable is required\")\n        \n        try:\n            self.client = genai.Client(api_key=api_key)\n            self.model = \"gemini-2.0-flash-exp\"  # Use experimental model\n            logging.info(\"Gemini client initialized successfully\")\n        except Exception as e:\n            logging.error(f\"Failed to initialize Gemini client: {str(e)}\")\n            raise ValueError(f\"Failed to initialize Gemini client: {str(e)}\")\n    \n    def get_book_recommendations(self, user_query: str, available_books: List[Dict]) -> Dict[str, Any]:\n        \"\"\"\n        Menggunakan Gemini untuk memberikan rekomendasi buku berdasarkan pertanyaan pengguna\n        \"\"\"\n        try:\n            # Format daftar buku yang tersedia\n            books_list = self._format_books_for_prompt(available_books)\n            \n            # Buat prompt yang lebih detail untuk Gemini\n            prompt = f\"\"\"\n            Kamu adalah asisten ahli rekomendasi buku yang sangat pintar dalam menganalisis kebutuhan pembaca.\n\n            PERTANYAAN PENGGUNA: \"{user_query}\"\n\n            DAFTAR BUKU YANG TERSEDIA:\n            {books_list}\n\n            INSTRUKSI ANALISIS:\n            1. Analisis pertanyaan pengguna dengan cermat untuk memahami:\n               - Genre yang diinginkan (romance, thriller, motivasi, dll)\n               - Mood atau suasana hati (ringan, serius, menghibur, dll)\n               - Target pembaca (anak muda, dewasa, remaja, dll)\n               - Tema spesifik (petualangan, cinta, bisnis, self-improvement, dll)\n               \n            2. Untuk setiap buku, cocokkan dengan pertanyaan berdasarkan:\n               - JUDUL: Apakah judul mencerminkan tema yang dicari?\n               - TAG/GENRE: Apakah genre sesuai dengan yang diminta?\n               - DESKRIPSI: Apakah deskripsi menjelaskan konten yang relevan?\n               \n            3. Berikan skor relevansi 0.0-1.0 berdasarkan seberapa cocok buku dengan pertanyaan\n            \n            4. Pilih 3-6 buku dengan skor tertinggi (minimal 0.6)\n\n            CONTOH PENALARAN:\n            - Jika user cari \"buku motivasi untuk anak muda\" → cari tag \"Motivasi\", \"Self-Help\" dan deskripsi yang menyebutkan \"inspirasi\", \"semangat\", dll\n            - Jika user cari \"novel romance ringan\" → cari tag \"Romance\", \"Fiction\" dan deskripsi yang tidak terlalu drama/berat\n            - Jika user cari \"buku tentang algoritma\" → cari judul/deskripsi yang menyebutkan \"algoritma\", \"programming\", \"komputer\"\n\n            WAJIB BERIKAN RESPONS DALAM FORMAT JSON INI:\n            {{\n                \"recommended_books\": [\n                    {{\n                        \"id\": \"book_id\",\n                        \"relevance_score\": 0.95,\n                        \"reason\": \"Penjelasan detail mengapa buku ini cocok berdasarkan judul/tag/deskripsi yang sesuai dengan permintaan user\"\n                    }}\n                ],\n                \"explanation\": \"Penjelasan umum tentang kriteria pencarian dan mengapa rekomendasi ini dipilih\"\n            }}\n            \n            PENTING: Hanya rekomendasikan buku yang benar-benar relevan dengan pertanyaan. Jangan memaksa merekomendasikan jika tidak ada yang cocok.\n            \"\"\"\n            \n            response = self.client.models.generate_content(\n                model=self.model,\n                contents=prompt,\n                config=types.GenerateContentConfig(\n                    response_mime_type=\"application/json\",\n                    temperature=0.3  # Lower temperature for more consistent results\n                )\n            )\n            \n            if response.text:\n                result = json.loads(response.text)\n                # Filter books with relevance score >= 0.6\n                if 'recommended_books' in result:\n                    filtered_books = [\n                        book for book in result['recommended_books'] \n                        if book.get('relevance_score', 0) >= 0.6\n                    ]\n                    result['recommended_books'] = filtered_books\n                return result\n            else:\n                return {\"error\": \"Tidak ada respons dari AI\"}\n                \n        except Exception as e:\n            logging.error(f\"Error in Gemini recommendation: {str(e)}\")\n            return {\"error\": \"Layanan AI rekomendasi sedang tidak tersedia. Silakan coba lagi nanti.\"}\n    \n    def find_similar_books(self, target_book: Dict, available_books: List[Dict], limit: int = 4) -> List[Dict]:\n        \"\"\"\n        Mencari buku-buku yang mirip dengan buku target menggunakan Gemini\n        \"\"\"\n        try:\n            # Format buku target dan daftar buku\n            target_info = f\"\"\"\n            BUKU TARGET:\n            - Judul: {target_book.get('judul', '')}\n            - Penulis: {target_book.get('penulis', '')}\n            - Tag/Genre: {target_book.get('tag', [])}\n            - Deskripsi: {target_book.get('deskripsi_singkat', '')}\n            \"\"\"\n            \n            books_list = self._format_books_for_prompt([book for book in available_books if book.get('id') != target_book.get('id')])\n            \n            prompt = f\"\"\"\n            {target_info}\n            \n            DAFTAR BUKU YANG TERSEDIA:\n            {books_list}\n            \n            INSTRUKSI:\n            Cari {limit} buku yang paling mirip dengan buku target berdasarkan:\n            1. GENRE/TAG yang sama atau serupa\n            2. TEMA yang mirip dari deskripsi\n            3. GAYA atau SUASANA cerita yang sejenis\n            \n            Berikan skor kemiripan 0.0-1.0 dan alasan yang jelas.\n            \n            FORMAT RESPONS JSON:\n            {{\n                \"similar_books\": [\n                    {{\n                        \"id\": \"book_id\",\n                        \"similarity_score\": 0.85,\n                        \"reason\": \"Alasan kemiripan berdasarkan genre/tema/gaya\"\n                    }}\n                ]\n            }}\n            \"\"\"\n            \n            response = self.client.models.generate_content(\n                model=self.model,\n                contents=prompt,\n                config=types.GenerateContentConfig(\n                    response_mime_type=\"application/json\",\n                    temperature=0.3\n                )\n            )\n            \n            if response.text:\n                result = json.loads(response.text)\n                return result.get(\"similar_books\", [])\n            else:\n                return []\n                \n        except Exception as e:\n            logging.error(f\"Error finding similar books: {str(e)}\")\n            return []\n    \n    def detect_book_region(self, image_data: bytes, mime_type: str = \"image/jpeg\") -> Optional[Tuple[int, int, int, int]]:\n        \"\"\"\n        Mendeteksi area/region buku dalam gambar menggunakan Gemini Vision\n        \n        Args:\n            image_data: Binary data dari gambar\n            mime_type: MIME type dari gambar\n            \n        Returns:\n            Tuple (x, y, width, height) dalam persentase (0-100), atau None jika gagal\n        \"\"\"\n        try:\n            import base64\n            \n            # Encode image to base64\n            image_base64 = base64.b64encode(image_data).decode('utf-8')\n            \n            # Buat prompt untuk mendeteksi buku\n            prompt = \"\"\"\n            Analisis gambar ini dan deteksi area cover buku.\n            \n            INSTRUKSI:\n            1. Identifikasi lokasi cover buku dalam gambar\n            2. Tentukan bounding box (kotak pembatas) untuk cover buku\n            3. Berikan koordinat dalam PERSENTASE (0-100) dari ukuran gambar\n            \n            Format koordinat:\n            - x: posisi kiri bounding box dari kiri gambar (%)\n            - y: posisi atas bounding box dari atas gambar (%)\n            - width: lebar bounding box (%)\n            - height: tinggi bounding box (%)\n            \n            Contoh: Jika buku di tengah gambar mengambil 60% lebar dan 80% tinggi:\n            {\"x\": 20, \"y\": 10, \"width\": 60, \"height\": 80}\n            \n            WAJIB BERIKAN RESPONS DALAM FORMAT JSON:\n            {\n                \"found\": true/false,\n                \"x\": 0-100,\n                \"y\": 0-100,\n                \"width\": 0-100,\n                \"height\": 0-100,\n                \"confidence\": 0.0-1.0\n            }\n            \n            Jika tidak ada buku yang terdeteksi, set \"found\": false\n            \"\"\"\n            \n            response = self.client.models.generate_content(\n                model=self.model,\n                contents=[\n                    types.Part.from_text(text=prompt),\n                    types.Part.from_bytes(\n                        data=image_data,\n                        mime_type=mime_type\n                    )\n                ],\n                config=types.GenerateContentConfig(\n                    response_mime_type=\"application/json\",\n                    temperature=0.1\n                )\n            )\n            \n            if response.text:\n                result = json.loads(response.text)\n                \n                if result.get('found') and result.get('confidence', 0) > 0.5:\n                    return (\n                        int(result['x']),\n                        int(result['y']),\n                        int(result['width']),\n                        int(result['height'])\n                    )\n            \n            return None\n                \n        except Exception as e:\n            logging.error(f\"Error detecting book region: {str(e)}\")\n            return None\n    \n    def auto_crop_book(self, image_data: bytes, mime_type: str = \"image/jpeg\") -> Tuple[bytes, str]:\n        \"\"\"\n        Auto-crop gambar ke area buku saja\n        \n        Args:\n            image_data: Binary data dari gambar original\n            mime_type: MIME type dari gambar\n            \n        Returns:\n            Tuple (cropped_image_data, mime_type)\n        \"\"\"\n        try:\n            # Deteksi region buku\n            region = self.detect_book_region(image_data, mime_type)\n            \n            # Jika tidak terdeteksi, return gambar original\n            if region is None:\n                logging.info(\"Book region not detected, using original image\")\n                return image_data, mime_type\n            \n            x_pct, y_pct, width_pct, height_pct = region\n            \n            # Load gambar dengan Pillow\n            img = Image.open(BytesIO(image_data))\n            img_width, img_height = img.size\n            \n            # Konversi persentase ke pixel\n            x = int(img_width * x_pct / 100)\n            y = int(img_height * y_pct / 100)\n            width = int(img_width * width_pct / 100)\n            height = int(img_height * height_pct / 100)\n            \n            # Crop dengan margin 2% untuk safety\n            margin_x = int(width * 0.02)\n            margin_y = int(height * 0.02)\n            \n            left = max(0, x - margin_x)\n            top = max(0, y - margin_y)\n            right = min(img_width, x + width + margin_x)\n            bottom = min(img_height, y + height + margin_y)\n            \n            # Crop gambar\n            cropped_img = img.crop((left, top, right, bottom))\n            \n            # Convert ke bytes\n            output = BytesIO()\n            img_format = 'JPEG' if mime_type == 'image/jpeg' else 'PNG'\n            cropped_img.save(output, format=img_format, quality=95)\n            cropped_data = output.getvalue()\n            \n            logging.info(f\"Image cropped from {img.size} to {cropped_img.size}\")\n            return cropped_data, mime_type\n            \n        except Exception as e:\n            logging.error(f\"Error auto-cropping image: {str(e)}\")\n            # Return original jika gagal\n            return image_data, mime_type\n    \n    def extract_book_info_from_image(self, image_data: bytes, mime_type: str = \"image/jpeg\") -> Dict[str, Any]:\n        \"\"\"\n        Menggunakan Gemini Vision untuk mengekstrak informasi buku dari gambar\n        \n        Args:\n            image_data: Binary data dari gambar buku\n            mime_type: MIME type dari gambar (default: image/jpeg)\n            \n        Returns:\n            Dictionary dengan informasi buku yang diekstrak\n        \"\"\"\n        try:\n            import base64\n            \n            # Encode image to base64\n            image_base64 = base64.b64encode(image_data).decode('utf-8')\n            \n            # Buat prompt untuk Gemini Vision\n            # Daftar tag yang tersedia\n            available_tags = [\n                'Algoritma', 'Struktur Data', 'Pemrograman', 'Basis Data',\n                'Kecerdasan Buatan', 'Pembelajaran Mesin', 'Sistem Operasi',\n                'Jaringan Komputer', 'Keamanan Informatika', 'Komputasi Awan',\n                'Data Science', 'Sistem Tertanam', 'Rekayasa Perangkat Lunak',\n                'Manajemen Proyek', 'Manajemen Sumber Daya Manusia', 'Akuntansi',\n                'Keuangan', 'Analisis Bisnis', 'Bisnis Digital', 'Pemasaran',\n                'Ekonomi Mikro/Makro', 'Perilaku Organisasi', 'Audit Internal',\n                'Teknik Lingkungan', 'Teknik Pertambangan', 'Teknik Elektro',\n                'Teknik Mesin', 'Sistem Proses', 'Kontrol Otomatis', 'Robotika',\n                'Arsitektur Komputer', 'Sistem Terdistribusi', 'Komputasi Paralel',\n                'Pemrograman Web', 'Pemrograman Mobile', 'Internet of Things (IoT)',\n                'Cloud Native', 'Containerization', 'Microservices', 'API Development',\n                'Testing & QA', 'Code Review', 'Version Control', 'Dokumentasi Teknis',\n                'Manajemen Database', 'Data Warehousing', 'Business Intelligence',\n                'Visualisasi Data', 'Statistika Terapan', 'Riset Operasi', 'Optimasi',\n                'Simulasi Sistem', 'Pemodelan Matematika', 'Kriptografi', 'Forensik Digital',\n                'Etika Teknologi', 'Hukum Siber', 'Manajemen Risiko TI', 'Tata Kelola TI',\n                'Audit Sistem'\n            ]\n            \n            tags_list = ', '.join(available_tags)\n            \n            prompt = f\"\"\"\n            Analisis gambar buku ini dengan sangat teliti dan ekstrak informasi berikut:\n            \n            INSTRUKSI:\n            1. Baca dan identifikasi JUDUL BUKU dengan akurat (perhatikan huruf besar/kecil)\n            2. Identifikasi NAMA PENULIS dengan lengkap\n            3. Pilih 2-4 TAG yang PALING SESUAI dari daftar berikut:\n               {tags_list}\n               \n               Pilih tag berdasarkan:\n               - Topik utama buku yang terlihat dari judul dan cover\n               - Kategori/bidang ilmu yang paling relevan\n               - HANYA gunakan tag dari daftar di atas, JANGAN buat tag baru\n               - Pilih tag yang paling spesifik dan sesuai\n               \n            4. Buat DESKRIPSI LENGKAP (MINIMAL 3500 KARAKTER) yang FOKUS pada topik utama buku:\n               \n               - Jelaskan apa topik utama buku ini secara detail\n               - Apa saja yang dibahas dalam buku (konsep, metode, pembahasan)\n               - Siapa target pembaca yang cocok (level, latar belakang)\n               - Apa manfaat atau skill yang didapat setelah membaca\n               - Bagaimana buku ini bisa diterapkan dalam praktik\n            \n            PENTING:\n            - Jika ada teks dalam bahasa Indonesia, pertahankan bahasa Indonesia\n            - Jika teks dalam bahasa Inggris, pertahankan bahasa Inggris\n            - Pastikan judul dan penulis PERSIS seperti yang tertulis di buku\n            - Tag HARUS dipilih dari daftar yang tersedia, jangan buat tag baru\n            - Deskripsi HARUS MINIMAL 3500 KARAKTER (bukan kata), lebih panjang lebih baik\n            - Fokus pada TOPIK UTAMA buku, bukan hal-hal umum\n            - Gunakan bahasa yang informatif, profesional, dan menarik\n            - Jelaskan secara DETAIL dan RELEVAN dengan isi buku\n            - Hindari kalimat yang terlalu umum atau klise\n            - Buat deskripsi dalam 1-2 paragraf yang padat informasi\n            \n            WAJIB BERIKAN RESPONS DALAM FORMAT JSON INI:\n            {{\n                \"judul\": \"Judul Buku Lengkap\",\n                \"penulis\": \"Nama Penulis Lengkap\",\n                \"tag\": [\"Tag1\", \"Tag2\", \"Tag3\"],\n                \"deskripsi_singkat\": \"Deskripsi singkat yang informatif tentang buku ini...\"\n            }}\n            \n            Jika gambar tidak jelas atau tidak bisa dibaca, berikan respons dengan field \"error\".\n            \"\"\"\n            \n            # Call Gemini Vision API\n            response = self.client.models.generate_content(\n                model=self.model,\n                contents=[\n                    types.Part.from_text(text=prompt),\n                    types.Part.from_bytes(\n                        data=image_data,\n                        mime_type=mime_type\n                    )\n                ],\n                config=types.GenerateContentConfig(\n                    response_mime_type=\"application/json\",\n                    temperature=0.2  # Lower temperature for more accurate extraction\n                )\n            )\n            \n            if response.text:\n                try:\n                    result = json.loads(response.text)\n                except json.JSONDecodeError as e:\n                    logging.error(f\"Failed to parse Gemini JSON response: {str(e)}\")\n                    return {\"error\": \"AI memberikan respons yang tidak valid. Silakan coba lagi.\"}\n                \n                # Validate the result\n                if 'error' in result:\n                    return {\"error\": result.get('error', 'Tidak dapat membaca informasi dari gambar')}\n                \n                # Ensure all required fields are present\n                required_fields = ['judul', 'penulis', 'tag', 'deskripsi_singkat']\n                for field in required_fields:\n                    if field not in result or not result[field]:\n                        return {\"error\": f\"Informasi {field} tidak dapat diekstrak dari gambar\"}\n                \n                # Ensure tag is a list\n                if isinstance(result['tag'], str):\n                    result['tag'] = [result['tag']]\n                \n                # Convert all-caps title to title case\n                if result.get('judul'):\n                    judul = result['judul']\n                    # Check if the title is all uppercase (with tolerance for spaces and punctuation)\n                    words = judul.split()\n                    if all(word.isupper() or not word.isalpha() for word in words):\n                        # Convert to title case\n                        result['judul'] = judul.title()\n                \n                logging.info(f\"Successfully extracted book info: {result.get('judul', 'Unknown')}\")\n                return result\n            else:\n                return {\"error\": \"Tidak ada respons dari AI\"}\n                \n        except Exception as e:\n            logging.error(f\"Error in image analysis: {str(e)}\")\n            return {\"error\": f\"Terjadi kesalahan saat menganalisis gambar: {str(e)}\"}\n    \n    def _format_books_for_prompt(self, books: List[Dict]) -> str:\n        \"\"\"\n        Format daftar buku untuk prompt Gemini dengan informasi lengkap\n        \"\"\"\n        formatted_books = []\n        for i, book in enumerate(books, 1):\n            book_info = f\"\"\"\n{i}. ID: {book.get('id', '')}\n   Judul: \"{book.get('judul', '')}\"\n   Penulis: {book.get('penulis', '')}\n   Tag/Genre: {book.get('tag', [])}\n   Deskripsi: \"{book.get('deskripsi_singkat', '')}\"\n            \"\"\".strip()\n            formatted_books.append(book_info)\n        \n        return \"\\n\\n\".join(formatted_books)\n","size_bytes":20414},"static/css/style.css":{"content":"/* Custom CSS for RekoBuku */\n\n:root {\n    --primary-color: #4f46e5;\n    --secondary-color: #6b7280;\n    --success-color: #059669;\n    --warning-color: #d97706;\n    --danger-color: #dc2626;\n    --light-bg: #f8fafc;\n}\n\nbody {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n    background-color: var(--light-bg);\n}\n\n/* Navigation */\n.navbar-brand {\n    font-size: 1.5rem;\n    font-weight: 700;\n}\n\n.nav-link {\n    font-weight: 500;\n    transition: color 0.2s ease;\n}\n\n.nav-link:hover {\n    color: var(--primary-color) !important;\n}\n\n.nav-link.active {\n    color: var(--primary-color) !important;\n    font-weight: 600;\n}\n\n/* Book Cards */\n.book-card {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    border: none;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.book-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 24px rgba(0,0,0,0.15);\n}\n\n.book-cover {\n    height: 200px;\n    object-fit: cover;\n    border-radius: 0.375rem 0.375rem 0 0;\n}\n\n.book-card .card-title {\n    font-size: 0.9rem;\n    font-weight: 600;\n    line-height: 1.3;\n    height: 2.6rem;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n}\n\n.book-card .card-text {\n    font-size: 0.8rem;\n    margin-bottom: 0.5rem;\n}\n\n/* Buttons */\n.btn {\n    font-weight: 500;\n    border-radius: 0.5rem;\n    transition: all 0.2s ease;\n}\n\n.btn-primary {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.btn-primary:hover {\n    background-color: #3730a3;\n    border-color: #3730a3;\n    transform: translateY(-1px);\n}\n\n.btn-outline-primary:hover {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    transform: translateY(-1px);\n}\n\n.btn-outline-danger:hover {\n    transform: translateY(-1px);\n}\n\n/* Genre badges */\n.badge {\n    font-size: 0.7rem;\n    font-weight: 500;\n}\n\n/* Cards */\n.card {\n    border: none;\n    border-radius: 0.75rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n}\n\n.card-body {\n    padding: 1.5rem;\n}\n\n/* Forms */\n.form-control {\n    border-radius: 0.5rem;\n    border: 1.5px solid #e5e7eb;\n    padding: 0.75rem 1rem;\n    transition: border-color 0.2s ease, box-shadow 0.2s ease;\n}\n\n.form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.15);\n}\n\n.form-label {\n    font-weight: 600;\n    color: #374151;\n    margin-bottom: 0.5rem;\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 0.75rem;\n    font-weight: 500;\n}\n\n/* Hero section */\n.display-4 {\n    font-weight: 800;\n    letter-spacing: -0.025em;\n}\n\n.lead {\n    font-size: 1.125rem;\n    font-weight: 400;\n}\n\n/* Profile image */\n.rounded-circle {\n    border: 2px solid #e5e7eb;\n}\n\n/* Mobile Navigation Styles */\n.mobile-header {\n    position: sticky;\n    top: 0;\n    z-index: 1020;\n}\n\n.mobile-profile img {\n    border: 2px solid var(--primary-color);\n}\n\n/* Mobile Bottom Navigation */\n.mobile-bottom-nav {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: white;\n    border-top: 1px solid #e5e7eb;\n    padding: 0.5rem 0;\n    z-index: 1030;\n    box-shadow: 0 -4px 20px rgba(0,0,0,0.1);\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 70px;\n}\n\n.mobile-bottom-nav .nav-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0.5rem 0.75rem;\n    text-decoration: none;\n    color: #6b7280;\n    transition: all 0.2s ease;\n    border-radius: 0.5rem;\n    min-width: 60px;\n}\n\n.mobile-bottom-nav .nav-item:hover {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.1);\n    text-decoration: none;\n}\n\n.mobile-bottom-nav .nav-item.active {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.15);\n}\n\n.mobile-bottom-nav .nav-item i {\n    font-size: 1.2rem;\n    margin-bottom: 0.25rem;\n}\n\n.mobile-bottom-nav .nav-item span {\n    font-size: 0.75rem;\n    font-weight: 500;\n    text-align: center;\n}\n\n/* Main content margin for mobile with bottom nav */\n@media (max-width: 991px) {\n    .main-content {\n        padding-bottom: 20px; /* Reduced since body also has padding */\n    }\n}\n\n/* Body padding for mobile to prevent footer overlap - only when authenticated */\n@media (max-width: 991px) {\n    body.authenticated {\n        padding-bottom: 80px;\n    }\n\n    body:not(.authenticated) {\n        padding-bottom: 0;\n    }\n}\n\n/* Horizontal Scroll for Books */\n.horizontal-scroll {\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    scrollbar-width: none; /* Firefox */\n    scroll-snap-type: x mandatory;\n    scroll-padding-left: 0.5rem;\n}\n\n/* Hide scrollbar for WebKit browsers */\n.horizontal-scroll::-webkit-scrollbar {\n    display: none;\n}\n\n.book-cards-container {\n    display: flex;\n    gap: 1rem;\n    padding: 0.5rem;\n    min-width: max-content;\n}\n\n.book-card-mobile {\n    flex: 0 0 auto;\n    scroll-snap-align: start;\n    width: 140px; /* Fixed width for better appearance */\n}\n\n/* Mobile specific adjustments */\n@media (max-width: 991px) {\n    .book-card-mobile {\n        width: 140px; /* Consistent width on mobile */\n    }\n}\n\n/* Very small screens */\n@media (max-width: 480px) {\n    .book-card-mobile {\n        width: 150px; /* Made wider for better proportion */\n    }\n\n    .book-cards-container {\n        gap: 0.75rem; /* Reduce gap on small screens */\n        padding: 0.5rem 0.75rem; /* Reduce horizontal padding */\n    }\n\n    .book-cover-mobile {\n        height: 180px; /* Reduced height for better proportion on small screens */\n    }\n}\n\n.book-card-mobile .card {\n    width: 100%;\n    border-radius: 1rem;\n}\n\n.book-cover-mobile {\n    height: 200px;\n    object-fit: cover;\n    border-radius: 1rem 1rem 0 0;\n}\n\n.book-card-mobile .card-body {\n    padding: 1rem 0.75rem;\n}\n\n.book-card-mobile .card-title {\n    font-size: 0.85rem;\n    line-height: 1.2;\n    height: 2.4rem;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n}\n\n.book-card-mobile .card-text {\n    font-size: 0.75rem;\n}\n\n.book-card-mobile .badge {\n    font-size: 0.65rem;\n    padding: 0.25rem 0.4rem;\n}\n\n.book-card-mobile .btn {\n    font-size: 0.75rem;\n    padding: 0.4rem 0.75rem;\n    border-radius: 0.5rem;\n}\n\n/* Desktop book card styles */\n.book-card-desktop {\n    flex: 0 0 auto;\n    scroll-snap-align: start;\n    width: 260px; /* Made wider for better desktop experience */\n}\n\n.book-cover-desktop {\n    height: 240px; /* Reduced height for better proportion */\n    object-fit: cover;\n    border-radius: 0.375rem 0.375rem 0 0;\n}\n\n.book-card-desktop .card {\n    width: 100%;\n    border-radius: 1rem;\n}\n\n.book-card-desktop .card-body {\n    padding: 1.25rem;\n}\n\n.book-card-desktop .card-title {\n    font-size: 0.95rem;\n    line-height: 1.3;\n    height: 2.6rem;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    font-weight: 600;\n}\n\n.book-card-desktop .card-text {\n    font-size: 0.85rem;\n}\n\n.book-card-desktop .badge {\n    font-size: 0.7rem;\n    padding: 0.25rem 0.5rem;\n}\n\n.book-card-desktop .btn {\n    font-size: 0.8rem;\n    padding: 0.5rem 0.8rem;\n    border-radius: 0.5rem;\n}\n\n/* Camera capture styles */\n.camera-container {\n    position: relative;\n    max-width: 100%;\n}\n\n#camera-video, #camera-canvas {\n    width: 100%;\n    height: auto;\n    border-radius: 0.375rem;\n    background: #000;\n}\n\n#camera-placeholder {\n    min-height: 200px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.btn-group .btn {\n    font-size: 0.875rem;\n}\n\n/* Crop modal styles */\n.crop-container {\n    position: relative;\n    overflow: hidden;\n    min-height: 400px;\n}\n\n.crop-container img {\n    max-width: 100%;\n    height: auto;\n    min-height: 400px;\n}\n\n.cropper-modal {\n    background-color: rgba(0, 0, 0, 0.6);\n}\n\n.cropper-crop-box {\n    border: 3px solid #007bff;\n    box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);\n}\n\n.cropper-view-box {\n    outline: 2px solid rgba(255, 255, 255, 0.9);\n}\n\n.cropper-face {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n.cropper-line {\n    background-color: #007bff;\n    opacity: 0.7;\n}\n\n.cropper-point {\n    background-color: #007bff;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    opacity: 0.9;\n}\n\n/* Enhanced crop modal for better visibility */\n#cropModal .modal-dialog {\n    max-width: 90vw;\n    width: 800px;\n}\n\n#cropModal .modal-body {\n    padding: 2rem;\n    min-height: 500px;\n}\n\n#image-to-crop {\n    display: block;\n    max-width: 100%;\n    height: auto;\n    min-height: 400px;\n    margin: 0 auto;\n}\n\n/* Mobile responsive for camera and crop */\n@media (max-width: 768px) {\n    .camera-container {\n        margin-bottom: 1rem;\n    }\n    \n    #camera-video, #camera-canvas {\n        max-height: 250px;\n        object-fit: cover;\n    }\n    \n    .d-flex.gap-2.flex-wrap {\n        gap: 0.5rem !important;\n    }\n    \n    .d-flex.gap-2.flex-wrap .btn {\n        font-size: 0.75rem;\n        padding: 0.375rem 0.75rem;\n        flex: 1;\n        min-width: auto;\n    }\n    \n    .btn-group.d-flex .btn {\n        font-size: 0.8rem;\n        padding: 0.5rem 0.25rem;\n    }\n    \n    .crop-container {\n        min-height: 350px;\n    }\n    \n    .crop-container img {\n        min-height: 350px;\n    }\n    \n    #cropModal .modal-dialog {\n        max-width: 95vw;\n        width: auto;\n        margin: 1rem;\n    }\n    \n    #cropModal .modal-body {\n        padding: 1rem;\n        min-height: 400px;\n    }\n    \n    #image-to-crop {\n        min-height: 300px;\n    }\n    \n    .cropper-crop-box {\n        border: 2px solid #007bff;\n    }\n    \n    .cropper-point {\n        width: 12px;\n        height: 12px;\n    }\n}\n\n/* Very small screens */\n@media (max-width: 480px) {\n    #cropModal .modal-dialog {\n        margin: 0.5rem;\n    }\n    \n    #cropModal .modal-body {\n        padding: 0.75rem;\n        min-height: 350px;\n    }\n    \n    #image-to-crop {\n        min-height: 250px;\n    }\n    \n    .crop-container {\n        min-height: 300px;\n    }\n    \n    .crop-container img {\n        min-height: 300px;\n    }\n    \n    .cropper-point {\n        width: 16px;\n        height: 16px;\n    }\n}</style>\n\n/* Desktop responsive improvements */\n@media (min-width: 992px) {\n    .main-content {\n        padding-bottom: 0;\n    }\n    \n    #camera-video, #camera-canvas {\n        max-height: 300px;\n    }\n}\n\n    body {\n        padding-bottom: 0;\n    }\n\n    /* Enable horizontal scroll on desktop */\n    .horizontal-scroll {\n        display: block;\n        overflow-x: auto;\n        cursor: grab;\n    }\n\n    .horizontal-scroll:active {\n        cursor: grabbing;\n    }\n\n    /* Desktop book cards container */\n    .book-cards-container {\n        display: flex;\n        gap: 1.5rem;\n        padding: 0.5rem 0.25rem;\n    }\n\n    /* Improve scrolling experience on desktop */\n    .horizontal-scroll {\n        padding-bottom: 10px;\n        margin-bottom: -10px;\n    }\n}\n\n/* Footer */\nfooter {\n    margin-top: auto;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .book-card .card-title {\n        font-size: 0.85rem;\n        height: auto;\n        -webkit-line-clamp: 3;\n    }\n\n    .display-4 {\n        font-size: 2rem;\n    }\n\n    .lead {\n        font-size: 1rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .container {\n        padding-left: 1rem;\n        padding-right: 1rem;\n    }\n\n    .book-cover {\n        height: 180px;\n    }\n}\n\n/* Animation for favorite button */\n.book-favorite-btn {\n    position: relative;\n    overflow: hidden;\n}\n\n.book-favorite-btn.favorited {\n    background-color: var(--danger-color);\n    border-color: var(--danger-color);\n    color: white;\n}\n\n/* Loading state */\n.btn-loading {\n    position: relative;\n    color: transparent;\n}\n\n.btn-loading::after {\n    content: \"\";\n    position: absolute;\n    width: 16px;\n    height: 16px;\n    top: 50%;\n    left: 50%;\n    margin-left: -8px;\n    margin-top: -8px;\n    border: 2px solid #ffffff;\n    border-radius: 50%;\n    border-top-color: transparent;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n/* Admin Panel Styles */\n.admin-sidebar {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    padding: 0;\n    box-shadow: 2px 0 10px rgba(0,0,0,0.1);\n}\n\n.admin-brand {\n    padding: 1.5rem;\n    border-bottom: 1px solid rgba(255,255,255,0.1);\n    margin-bottom: 1rem;\n}\n\n.admin-brand h4 {\n    color: white;\n    margin: 0;\n    font-weight: 600;\n}\n\n.admin-nav {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.admin-nav li {\n    margin-bottom: 0.5rem;\n}\n\n.admin-nav a {\n    display: block;\n    padding: 12px 24px;\n    color: rgba(255,255,255,0.9);\n    text-decoration: none;\n    border-radius: 0 25px 25px 0;\n    margin-right: 20px;\n    transition: all 0.3s ease;\n    font-weight: 500;\n}\n\n.admin-nav a:hover {\n    background: rgba(255,255,255,0.1);\n    color: white;\n    transform: translateX(5px);\n}\n\n.admin-nav a.active {\n    background: rgba(255,255,255,0.2);\n    color: white;\n}\n\n.admin-nav i {\n    margin-right: 10px;\n    width: 20px;\n    text-align: center;\n}\n\n.admin-content {\n    padding: 0;\n    background: #f8f9fa;\n    min-height: 100vh;\n}\n\n.admin-header {\n    background: white;\n    padding: 1rem 2rem;\n    border-bottom: 1px solid #dee2e6;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.admin-page-title {\n    color: #2c3e50;\n    font-weight: 700;\n    margin: 0;\n    font-size: 2rem;\n}\n\n.admin-page-subtitle {\n    color: #6c757d;\n    margin: 0.5rem 0 0 0;\n}\n\n/* Fix form text colors */\n.form-label {\n    color: #2c3e50 !important;\n    font-weight: 600;\n}\n\n.form-control, .form-select {\n    color: #2c3e50 !important;\n    background-color: white !important;\n}\n\n.form-control:focus, .form-select:focus {\n    color: #2c3e50 !important;\n    background-color: white !important;\n    border-color: #667eea;\n    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n}\n\n.form-text {\n    color: #6c757d !important;\n}\n\n.card-title {\n    color: #2c3e50 !important;\n}\n\n.text-muted {\n    color: #6c757d !important;\n}\n\n/* Choices.js styling fixes */\n.choices__inner {\n    background-color: white !important;\n    color: #2c3e50 !important;\n    border: 1px solid #ced4da !important;\n}\n\n.choices__input {\n    color: #2c3e50 !important;\n    background-color: transparent !important;\n}\n\n.choices__item {\n    color: #2c3e50 !important;\n}\n\n.choices__item--choice {\n    color: #2c3e50 !important;\n}\n\n.choices__item--selectable {\n    color: #2c3e50 !important;\n}\n\n.choices__placeholder {\n    color: #6c757d !important;\n}\n\n.choices__list--dropdown .choices__item--selectable {\n    color: #2c3e50 !important;\n}\n\n.choices__list--dropdown .choices__item--selectable:hover {\n    background-color: #667eea !important;\n    color: white !important;\n}\n\n/* Admin Panel Styles */\n.admin-panel {\n    background-color: var(--light-bg);\n}\n\n/* Admin Navigation */\n.admin-navbar {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    box-shadow: 0 4px 16px rgba(79, 70, 229, 0.15);\n}\n\n.admin-navbar .navbar-brand {\n    color: white !important;\n    font-weight: 700;\n}\n\n.admin-navbar .navbar-nav .nav-link {\n    color: rgba(255, 255, 255, 0.9) !important;\n    font-weight: 500;\n    padding: 0.5rem 1rem;\n    border-radius: 0.5rem;\n    margin: 0 0.25rem;\n    transition: all 0.2s ease;\n}\n\n.admin-navbar .navbar-nav .nav-link:hover {\n    color: white !important;\n    background-color: rgba(255, 255, 255, 0.15);\n}\n\n.admin-navbar .navbar-nav .nav-link.active {\n    color: white !important;\n    background-color: rgba(255, 255, 255, 0.2);\n    font-weight: 600;\n}\n\n/* Admin Bottom Navigation */\n.admin-bottom-nav {\n    background: white;\n    border-top: 1px solid #e5e7eb;\n    box-shadow: 0 -4px 20px rgba(0,0,0,0.1);\n}\n\n.admin-bottom-nav .nav-item {\n    color: var(--secondary-color);\n}\n\n.admin-bottom-nav .nav-item:hover {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.1);\n}\n\n.admin-bottom-nav .nav-item.active {\n    color: var(--primary-color);\n    background-color: rgba(79, 70, 229, 0.15);\n}\n\n/* Admin Cards */\n.admin-panel .card {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    border: none;\n    border-radius: 1rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.08);\n}\n\n.admin-panel .card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(0,0,0,0.15);\n}\n\n.admin-panel .card-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    color: white;\n    border: none;\n    border-radius: 1rem 1rem 0 0 !important;\n    padding: 1.25rem 1.5rem;\n}\n\n.admin-panel .card-header h5 {\n    margin-bottom: 0;\n    font-weight: 600;\n}\n\n.admin-panel .card-body {\n    padding: 1.5rem;\n}\n\n/* Admin Statistics Cards */\n.admin-stat-card {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    border: none;\n    border-radius: 1rem;\n    color: white;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.admin-stat-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(79, 70, 229, 0.3);\n}\n\n.admin-stat-card.bg-success {\n    background: linear-gradient(135deg, var(--success-color) 0%, #10b981 100%) !important;\n}\n\n.admin-stat-card.bg-warning {\n    background: linear-gradient(135deg, var(--warning-color) 0%, #f59e0b 100%) !important;\n}\n\n.admin-stat-card.bg-info {\n    background: linear-gradient(135deg, #0ea5e9 0%, #3b82f6 100%) !important;\n}\n\n/* Admin Tables */\n.admin-panel .table-responsive {\n    border-radius: 0.75rem;\n    overflow: hidden;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.08);\n}\n\n.admin-panel .table {\n    margin-bottom: 0;\n}\n\n.admin-panel .table th {\n    font-weight: 600;\n    border-top: none;\n    background-color: var(--primary-color);\n    color: white;\n    padding: 1rem;\n}\n\n.admin-panel .table td {\n    padding: 1rem;\n    border-color: #f1f5f9;\n}\n\n.admin-panel .table tbody tr:hover {\n    background-color: rgba(79, 70, 229, 0.05);\n}\n\n/* Admin Buttons */\n.admin-panel .btn-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    border: none;\n    font-weight: 600;\n    padding: 0.75rem 1.5rem;\n    border-radius: 0.75rem;\n}\n\n.admin-panel .btn-primary:hover {\n    background: linear-gradient(135deg, #3730a3 0%, #4f46e5 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 24px rgba(79, 70, 229, 0.3);\n}\n\n.admin-panel .btn-outline-primary {\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n    font-weight: 600;\n    border-radius: 0.75rem;\n}\n\n.admin-panel .btn-outline-primary:hover {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    transform: translateY(-2px);\n}\n\n/* Admin Action Cards */\n.admin-action-card {\n    border: 2px solid #e5e7eb;\n    border-radius: 1rem;\n    transition: all 0.2s ease;\n    background: white;\n}\n\n.admin-action-card:hover {\n    border-color: var(--primary-color);\n    transform: translateY(-4px);\n    box-shadow: 0 8px 32px rgba(79, 70, 229, 0.15);\n}\n\n.admin-action-card .card-body {\n    padding: 2rem;\n}\n\n/* Mobile admin adjustments */\n@media (max-width: 991px) {\n    .admin-panel .card-body {\n        padding: 1rem;\n    }\n\n    .admin-panel .btn-group-sm .btn {\n        padding: 0.25rem 0.4rem;\n        font-size: 0.7rem;\n        border-radius: 0.375rem;\n    }\n\n    .admin-panel .table-responsive {\n        font-size: 0.85rem;\n    }\n\n    .admin-panel .table th,\n    .admin-panel .table td {\n        padding: 0.75rem 0.5rem;\n    }\n\n    .admin-action-card .card-body {\n        padding: 1.25rem;\n    }\n\n    .admin-stat-card .card-body {\n        padding: 1.25rem;\n    }\n\n    /* Mobile dashboard specific */\n    .admin-stat-card h3 {\n        font-size: 1.5rem;\n    }\n\n    .admin-stat-card .card-text {\n        font-size: 0.8rem;\n    }\n\n    .admin-stat-card .fas {\n        font-size: 1.5rem !important;\n    }\n\n    .admin-action-card-mobile {\n        border: 2px solid #e5e7eb;\n        transition: all 0.2s ease;\n        background: white !important;\n    }\n\n    .admin-action-card-mobile:hover {\n        border-color: var(--primary-color);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 16px rgba(79, 70, 229, 0.15);\n    }\n}\n\n/* Very small mobile adjustments */\n@media (max-width: 480px) {\n    .admin-stat-card h3 {\n        font-size: 1.25rem;\n    }\n\n    .admin-stat-card .card-text {\n        font-size: 0.75rem;\n    }\n\n    .admin-action-card-mobile {\n        padding: 1rem !important;\n    }\n\n    .admin-action-card-mobile h6 {\n        font-size: 0.9rem;\n    }\n\n    .admin-action-card-mobile .btn {\n        font-size: 0.8rem;\n        padding: 0.5rem 1rem;\n    }\n}\n\n/* Admin Page Titles */\n.admin-page-title {\n    color: var(--primary-color);\n    font-weight: 700;\n    margin-bottom: 0.5rem;\n}\n\n.admin-page-subtitle {\n    color: var(--secondary-color);\n    font-size: 1.1rem;\n}\n\n/* Admin Badges */\n.admin-panel .badge {\n    font-weight: 600;\n    padding: 0.5rem 0.75rem;\n    border-radius: 0.5rem;\n}\n\n/* Admin Form Controls */\n.admin-panel .form-control {\n    border-radius: 0.75rem;\n    border: 2px solid #e5e7eb;\n    padding: 0.75rem 1rem;\n}\n\n.admin-panel .form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.15);\n}\n\n.admin-panel .form-select {\n    border-radius: 0.75rem;\n    border: 2px solid #e5e7eb;\n    padding: 0.75rem 1rem;\n}\n\n.admin-panel .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(79, 70, 229, 0.15);\n}\n\n/* Mobile Book List Styles */\n.mobile-book-list {\n    background: white;\n    border-radius: 1rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.08);\n    overflow: hidden;\n}\n\n.mobile-book-item {\n    padding: 1rem;\n    border-bottom: 1px solid #f1f5f9;\n    transition: background-color 0.2s ease;\n}\n\n.mobile-book-item:last-child {\n    border-bottom: none;\n}\n\n.mobile-book-item:hover {\n    background-color: rgba(79, 70, 229, 0.02);\n}\n\n.mobile-book-cover {\n    width: 50px;\n    height: 75px;\n    object-fit: cover;\n    border-radius: 0.5rem;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.15);\n}\n\n.mobile-book-title {\n    font-size: 0.95rem;\n    font-weight: 600;\n    color: #1f2937;\n    line-height: 1.3;\n    margin-bottom: 0.25rem;\n}\n\n.mobile-book-author {\n    font-size: 0.85rem;\n    color: #6b7280;\n    margin-bottom: 0.5rem;\n}\n\n.mobile-book-genres {\n    margin-bottom: 0.5rem;\n}\n\n.mobile-genre-badge {\n    font-size: 0.7rem;\n    padding: 0.25rem 0.5rem;\n    background-color: var(--primary-color);\n    color: white;\n    border-radius: 0.375rem;\n    font-weight: 500;\n}\n\n.mobile-book-rating {\n    font-size: 0.85rem;\n    color: #374151;\n}\n\n.mobile-book-rating .fas {\n    font-size: 0.8rem;\n    margin-right: 0.25rem;\n}\n\n.mobile-book-actions {\n    display: flex;\n    gap: 0.25rem;\n}\n\n.mobile-book-actions .btn {\n    padding: 0.25rem 0.5rem;\n    font-size: 0.75rem;\n    border-radius: 0.375rem;\n}\n\n/* Very small mobile adjustments */\n@media (max-width: 480px) {\n    .mobile-book-item {\n        padding: 0.75rem;\n    }\n\n    .mobile-book-cover {\n        width: 45px;\n        height: 68px;\n    }\n\n    .mobile-book-title {\n        font-size: 0.9rem;\n    }\n\n    .mobile-book-author {\n        font-size: 0.8rem;\n    }\n\n    .mobile-book-actions .btn {\n        padding: 0.2rem 0.4rem;\n        font-size: 0.7rem;\n    }\n}\n\n/* Profile page specific styles */\n.profile-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, #6366f1 100%);\n    color: white;\n    border-radius: 0.75rem;\n    padding: 2rem;\n    margin-bottom: 2rem;\n}\n\n.profile-header .btn-outline-light {\n    border: 2px solid rgba(255, 255, 255, 0.7);\n    color: white;\n    font-weight: 600;\n    border-radius: 1.5rem;\n    padding: 0.5rem 1.5rem;\n    transition: all 0.3s ease;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n}\n\n.profile-header .btn-outline-light:hover {\n    background: rgba(255, 255, 255, 0.2);\n    border-color: white;\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 8px 20px rgba(255, 255, 255, 0.3);\n}\n\n.profile-stats {\n    background: white;\n    border-radius: 0.75rem;\n    padding: 1.5rem;\n    box-shadow: 0 4px 16px rgba(0,0,0,0.1);\n}\n\n/* Book detail page */\n.book-detail-img {\n    max-width: 300px;\n    border-radius: 0.75rem;\n    box-shadow: 0 8px 32px rgba(0,0,0,0.15);\n}\n\n.book-detail-content {\n    padding-left: 2rem;\n}\n\n@media (max-width: 768px) {\n    .book-detail-content {\n        padding-left: 0;\n        margin-top: 1.5rem;\n    }\n}\n\n/* Choices.js Tag Selection Styling */\n.choices__inner--tag-select {\n    padding: 0.75rem;\n    border: 1px solid var(--bs-border-color);\n    border-radius: 0.5rem;\n    min-height: auto;\n    background-color: var(--bs-body-bg);\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.choices__inner--tag-select:focus-within {\n    border-color: var(--bs-primary);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n.choices__list--dropdown {\n    max-height: 260px;\n    border-radius: 0.5rem;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n    z-index: 1050;\n}\n\n.choices__item--choice {\n    padding: 0.75rem 1rem;\n    font-size: 0.875rem;\n    border-bottom: 1px solid var(--bs-border-color-translucent);\n    color: #000 !important;\n}\n\n.choices__item--choice:hover,\n.choices__item--choice.is-highlighted {\n    background-color: var(--bs-primary);\n    color: white !important;\n}\n\n.choices__list--dropdown .choices__item {\n    color: #000 !important;\n}\n\n.choices__list--dropdown .choices__item:hover {\n    color: white !important;\n}\n\n.choices__item--selectable {\n    padding: 0.5rem 0.75rem;\n}\n\n.choices__list--multiple .choices__item {\n    background-color: var(--bs-primary);\n    border: none;\n    border-radius: 0.375rem;\n    color: white;\n    margin-right: 0.375rem;\n    margin-bottom: 0.375rem;\n    padding: 0.375rem 0.5rem;\n    font-size: 0.75rem;\n    display: inline-flex;\n    align-items: center;\n    max-width: none;\n}\n\n.choices__button {\n    background-color: transparent;\n    border: none;\n    color: rgba(255, 255, 255, 0.8);\n    padding: 0 0 0 0.375rem;\n    margin-left: 0.25rem;\n    font-size: 0.875rem;\n    cursor: pointer;\n}\n\n.choices__button:hover {\n    color: white;\n}\n\n.choices__input--cloned {\n    background-color: transparent !important;\n    border: none !important;\n    font-size: 0.875rem;\n    padding: 0.25rem 0 !important;\n    margin: 0.25rem 0 !important;\n    min-width: 200px;\n}\n\n.choices__placeholder {\n    color: var(--bs-secondary);\n    opacity: 1;\n}\n\n/* Mobile responsiveness for tag selection */\n@media (max-width: 768px) {\n    .choices__list--dropdown {\n        max-height: 60vh;\n        position: fixed !important;\n        top: 50% !important;\n        left: 50% !important;\n        transform: translate(-50%, -50%) !important;\n        width: 90vw !important;\n        max-width: 400px;\n        border-radius: 1rem;\n        border: 1px solid var(--bs-border-color);\n        background: var(--bs-body-bg);\n        box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.25);\n        z-index: 1060;\n    }\n\n    .choices__item--choice {\n        padding: 1rem 1.25rem;\n        font-size: 1rem;\n        min-height: 44px; /* Touch-friendly size */\n        display: flex;\n        align-items: center;\n    }\n\n    .choices__list--multiple .choices__item {\n        margin-right: 0.25rem;\n        margin-bottom: 0.25rem;\n        padding: 0.5rem 0.75rem;\n        font-size: 0.8rem;\n        border-radius: 0.5rem;\n    }\n\n    .choices__input--cloned {\n        min-width: 150px;\n        font-size: 1rem;\n    }\n\n    .choices__inner--tag-select {\n        padding: 0.875rem;\n        min-height: 48px; /* Touch-friendly */\n    }\n}\n\n/* Tag count styling */\n#tag-count {\n    font-weight: 500;\n    font-size: 0.875rem;\n}","size_bytes":27706},"static/js/main.js":{"content":"// RekoBuku JavaScript Functions\n\n// Toggle favorite book\nasync function toggleFavorite(bookId) {\n    const button = document.querySelector(`.book-favorite-btn[data-book-id=\"${bookId}\"]`);\n    if (!button) return;\n    \n    // Add loading state\n    button.classList.add('btn-loading');\n    button.disabled = true;\n    \n    try {\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n        const response = await fetch(`/toggle_favorite/${bookId}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrfToken\n            }\n        });\n        \n        const data = await response.json();\n        \n        if (response.ok) {\n            // Update button appearance\n            const icon = button.querySelector('i');\n            const text = button.querySelector('.favorite-text');\n            \n            if (data.is_favorite) {\n                button.classList.remove('btn-outline-danger');\n                button.classList.add('btn-danger');\n                icon.classList.remove('far');\n                icon.classList.add('fas');\n                if (text) text.textContent = 'Hapus dari Favorit';\n            } else {\n                button.classList.remove('btn-danger');\n                button.classList.add('btn-outline-danger');\n                icon.classList.remove('fas');\n                icon.classList.add('far');\n                if (text) text.textContent = 'Tambahkan ke Favorit';\n            }\n            \n            // Show success message\n            showMessage(data.message, 'success');\n        } else {\n            showMessage(data.error || 'Terjadi kesalahan', 'error');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        showMessage('Terjadi kesalahan koneksi', 'error');\n    } finally {\n        // Remove loading state\n        button.classList.remove('btn-loading');\n        button.disabled = false;\n    }\n}\n\n// Show temporary message\nfunction showMessage(message, type = 'info') {\n    // Remove existing messages\n    const existingMessages = document.querySelectorAll('.temp-message');\n    existingMessages.forEach(msg => msg.remove());\n    \n    // Create new message\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show temp-message`;\n    messageDiv.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    // Insert at top of main content\n    const main = document.querySelector('main');\n    if (main) {\n        const container = document.createElement('div');\n        container.className = 'container mt-3';\n        container.appendChild(messageDiv);\n        main.insertBefore(container, main.firstChild);\n    }\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n        if (messageDiv.parentNode) {\n            messageDiv.parentNode.remove();\n        }\n    }, 5000);\n}\n\n// Initialize tooltips and other Bootstrap components\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize Bootstrap tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n    \n    // Initialize Bootstrap popovers\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    popoverTriggerList.map(function(popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n    \n    // Auto-dismiss alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.temp-message)');\n    alerts.forEach(alert => {\n        if (!alert.classList.contains('alert-danger')) {\n            setTimeout(() => {\n                const alertInstance = bootstrap.Alert.getOrCreateInstance(alert);\n                if (alertInstance) {\n                    alertInstance.close();\n                }\n            }, 5000);\n        }\n    });\n});\n\n// Smooth scroll for anchor links\ndocument.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n    anchor.addEventListener('click', function(e) {\n        e.preventDefault();\n        const target = document.querySelector(this.getAttribute('href'));\n        if (target) {\n            target.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start'\n            });\n        }\n    });\n});\n\n// Add loading states to form submissions\ndocument.querySelectorAll('form').forEach(form => {\n    form.addEventListener('submit', function() {\n        const submitButton = form.querySelector('button[type=\"submit\"], input[type=\"submit\"]');\n        if (submitButton) {\n            submitButton.classList.add('btn-loading');\n            submitButton.disabled = true;\n        }\n    });\n});","size_bytes":4957}},"version":1}